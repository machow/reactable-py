[
  {
    "objectID": "get-started/controls-sorting.html",
    "href": "get-started/controls-sorting.html",
    "title": "Sorting",
    "section": "",
    "text": "from reactable import Reactable, Column, embed_css\nfrom reactable.data import penguins\n\nimport polars as pl\n\n\nembed_css()\n\npl_penguins = penguins.to_polars()\n\n\n    \n    \n    \n    \n    \n\n\nTables are sortable by default. You can sort a column by clicking on its header, or sort multiple columns by holding the shift key while sorting.\nSorting toggles between ascending and descending order by default. To clear the sort, hold the shift key while sorting, and the sorting will additionally toggle between ascending, descending, and unsorted order.\n\n\n\n\n\n\nNote\n\n\n\nAscending order means the lowest, first, or earliest values will appear first. Descending order means the largest, last, or latest values will appear first.\n\n\n\nDefault sorted columns\nUse the defaultSorted= argument to sort columns by default:\n\nReactable(\n    pl_penguins,\n    default_sorted=[\"species\", \"island\"],\n)\n\n\n\n\nNotice that above column names are passed as a list. You can specify the order to sort, by passing a dictionary mapping column names to sort order (either “asc” for ascending, or “desc” for descending):\n\nReactable(\n    pl_penguins,\n    columns=[Column(id=\"species\", default_sort_order=\"desc\")],\n    default_sorted=[\"species\", \"island\"],\n)\n\n\n\n\n\n\nDefault sort order\nColumns are sorted in ascending order first by default. To change the default sort order for all columns in the table, set default_sort_order= to “asc” for ascending order, or “desc” for descending order.\nTo change the sort order of an individual column, set default_sort_order= in its Column() to “asc” or “desc”. The default sort order of the column takes precedence over the table.\n\nReactable(\n    pl_penguins,\n    default_sort_order=\"desc\",\n    columns=[Column(id=\"species\", default_sort_order=\"asc\")],\n    default_sorted=[\"species\", \"island\"],\n)\n\n\n\n\n\n\nSort missing values last\nYou can ignore missing values when sorting by setting sort_na_last= on a column:\n\nimport math\n\ndf = pl.DataFrame(\n    {\n        \"n\": [1.0, 2.0, 3.0, -math.inf, math.inf],\n        \"x\": [2.0, 3.0, 1.0, None, math.nan],\n        \"y\": [\"aa\", \"cc\", \"bb\", None, None],\n    },\n    strict=False,\n)\n\nReactable(\n    df,\n    default_col_def=Column(sort_na_last=True),\n    default_sorted=[\"x\"],\n)\n\n/opt/hostedtoolcache/Python/3.10.15/x64/lib/python3.10/site-packages/jupyter_client/session.py:721: UserWarning:\n\nMessage serialization failed with:\nOut of range float values are not JSON compliant\nSupporting this message is deprecated in jupyter-client 7, please make sure your message is JSON-compliant\n\n\n\n\n\n\n\n\nNo sorting\nYou can disable sorting by setting sortable to False on the table or column. When only some columns are sortable, it can help to indicate sortable columns using show_sortable:\n\nReactable(\n    pl_penguins.head(),\n    sortable=False,\n    show_sortable=True,\n    columns=[\n        Column(id=\"bill_length_mm\", sortable=True),\n        Column(id=\"bill_depth_mm\", sortable=True),\n    ],\n)\n\n\n\n\n\n\nHide sort icons\nYou can hide sort icons by setting show_sort_icon to False. This is only recommended when you want to use a custom sort indicator.\n\nReactable(\n    pl_penguins.head(),\n    show_sort_icon=False,\n)",
    "crumbs": [
      "Get Started",
      "Controls",
      "Sorting"
    ]
  },
  {
    "objectID": "get-started/format-aggregated.html",
    "href": "get-started/format-aggregated.html",
    "title": "Column aggregate cells",
    "section": "",
    "text": "from reactable import embed_css, Reactable, Column, ColFormat, ColFormatGroupBy\nfrom reactable.data import us_states\n\nembed_css()\nColumn formatters can be applied to aggregated cells, produced by grouping data.\nBy default, formatters apply to both standard cells and aggregate cells.\ndata = us_states\n\ncol_format = ColFormat(suffix=\" mi²\", separators=True)\n\nReactable(\n    data,\n    group_by=\"Region\",\n    columns=[\n        Column(id=\"Area\", aggregate=\"sum\", format=col_format),\n    ],\n)\nNote that the data is collapsed, with aggregate cells displaying the total area per group. The formatter has applied the suffix mi² to the aggregates.",
    "crumbs": [
      "Get Started",
      "Format",
      "Column aggregate cells"
    ]
  },
  {
    "objectID": "get-started/format-aggregated.html#formatting-aggregated-cells",
    "href": "get-started/format-aggregated.html#formatting-aggregated-cells",
    "title": "Column aggregate cells",
    "section": "Formatting aggregated cells",
    "text": "Formatting aggregated cells\nIf you want to format aggregated cells separately, provide a named list of cell and aggregated options:\nfrom reactable.models import ColFormatGroupBy\n\nColumn(\n  format = ColFormatGroupBy(\n    cell = colFormat(...),       # Standard cells\n    aggregated = colFormat(...)  # Aggregated cells\n  )\n)\nFor example, only the aggregated States are formatted here:\n\ndata = us_states\n\nReactable(\n    data,\n    group_by=\"Region\",\n    columns=[\n        Column(\n            id=\"States\",\n            aggregate=\"count\",\n            format=ColFormatGroupBy(aggregated=ColFormat(suffix=\" states\")),\n        ),\n        Column(id=\"Area\", aggregate=\"sum\", format=ColFormat(suffix=\" mi²\", separators=True)),\n    ],\n)",
    "crumbs": [
      "Get Started",
      "Format",
      "Column aggregate cells"
    ]
  },
  {
    "objectID": "get-started/controls-click-actions.html",
    "href": "get-started/controls-click-actions.html",
    "title": "Cell click actions",
    "section": "",
    "text": "You can add cell click actions using the onClick argument, which accepts the following values:\nimport htmltools\nfrom reactable import Reactable, Column, JS, embed_css\n\nfrom reactable.data import cars_93, penguins\nimport polars as pl\n\n\nembed_css()\n\npl_penguins = penguins.to_polars()",
    "crumbs": [
      "Get Started",
      "Controls",
      "Cell click actions"
    ]
  },
  {
    "objectID": "get-started/controls-click-actions.html#expand-on-click",
    "href": "get-started/controls-click-actions.html#expand-on-click",
    "title": "Cell click actions",
    "section": "Expand on click",
    "text": "Expand on click\n\nReactable(\n        pl_penguins[150:155],\n        group_by=\"species\",\n        details=lambda index: f\"Details for row: {index}\",\n        on_click=\"expand\",\n        row_style={\"cursor\": \"pointer\"},\n    )",
    "crumbs": [
      "Get Started",
      "Controls",
      "Cell click actions"
    ]
  },
  {
    "objectID": "get-started/controls-click-actions.html#select-on-click",
    "href": "get-started/controls-click-actions.html#select-on-click",
    "title": "Cell click actions",
    "section": "Select on click",
    "text": "Select on click\n\nReactable(\n    pl_penguins[:5],\n    selection=\"multiple\",\n    on_click=\"select\",\n)",
    "crumbs": [
      "Get Started",
      "Controls",
      "Cell click actions"
    ]
  },
  {
    "objectID": "get-started/controls-click-actions.html#custom-action",
    "href": "get-started/controls-click-actions.html#custom-action",
    "title": "Cell click actions",
    "section": "Custom action",
    "text": "Custom action\nThis example uses a custom click action to create custom “show details” action buttons in each row of the table:\n\ndata = cars_93[:5, [\"manufacturer\", \"model\", \"type\", \"price\"]]\ndata[\"details\"] = None\n\njs_on_click = JS(\n    \"\"\"function(rowInfo, column) {\n    // Only handle click events on the 'details' column\n    if (column.id !== 'details') {\n      return\n    }\n\n    // Display an alert dialog with details for the row\n    window.alert('Details for row ' + rowInfo.index + ':\\\\n' + JSON.stringify(rowInfo.values, null, 2))\n\n    // Send the click event to Shiny, which will be available in input$show_details\n    // Note that the row index starts at 0 in JavaScript, so we add 1\n    if (window.Shiny) {\n      Shiny.setInputValue('show_details', { index: rowInfo.index + 1 }, { priority: 'event' })\n    }\n  }\"\"\"\n)\n\nReactable(\n    data,\n    columns=[\n        Column(\n            id=\"details\",\n            name=\"\",\n            sortable=False,\n            cell=lambda ci: htmltools.tags.button(\"Show details\"),\n        )\n    ],\n    on_click=js_on_click,\n)\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nCustom click actions are currently not accessible to keyboard users, and are generally not recommended. If they must be used, ensure that they can be triggered by a keyboard through other means, such as a button in the example above.",
    "crumbs": [
      "Get Started",
      "Controls",
      "Cell click actions"
    ]
  },
  {
    "objectID": "get-started/style-custom-sort-indicators.html",
    "href": "get-started/style-custom-sort-indicators.html",
    "title": "Custom sort indicators",
    "section": "",
    "text": "Code\nimport htmltools\nfrom reactable import options, Reactable, embed_css\nfrom reactable.models import (\n    Column,\n    ColFormat,\n    ColGroup,\n)\nfrom reactable.data import cars_93\n\nembed_css()\nSometimes, table state is available in ways that allow for easy styling. For example, sorting uses an aria-sort proprety, that can be targeted with CSS rules.\nThis page illustrates how to add custom sort indicators by two steps:",
    "crumbs": [
      "Get Started",
      "Style",
      "Custom sort indicators"
    ]
  },
  {
    "objectID": "get-started/style-custom-sort-indicators.html#hiding-sort-icon",
    "href": "get-started/style-custom-sort-indicators.html#hiding-sort-icon",
    "title": "Custom sort indicators",
    "section": "Hiding sort icon",
    "text": "Hiding sort icon\nTo hide the default sort indicator, you can hide the default sort icon using reactable(show_sort_icon=False).\nThis also hides the sort icon when a header is focused, so it needs some visual focus indicator to ensure your table is accessible to keyboard users (to test this, click the first table header then press the Tab key to navigate to other headers).",
    "crumbs": [
      "Get Started",
      "Style",
      "Custom sort indicators"
    ]
  },
  {
    "objectID": "get-started/style-custom-sort-indicators.html#example",
    "href": "get-started/style-custom-sort-indicators.html#example",
    "title": "Custom sort indicators",
    "section": "Example",
    "text": "Example\nHere’s an example that changes the sort indicator to a bar on the top or bottom of the header (indicating an ascending or descending sort), and adds a light background to headers when hovered or focused.\nThis example adds sort indicators using only CSS, and takes advantage of the aria-sort attribute on table headers to style based on whether the column is sorted in ascending or descending order.\n\n\n\n\n\n\n\nReactable(\n    cars_93[:5, [\"manufacturer\", \"model\", \"type\", \"min_price\", \"price\"]],\n    show_sort_icon=False,\n    bordered=True,\n    default_sorted=[\"type\"],\n    default_col_def=Column(header_class=\"bar-sort-header\"),\n)\n\n&lt;style&gt;\n.bar-sort-header:hover,\n.bar-sort-header:focus {\n  background: rgba(0, 0, 0, 0.03);\n}\n\n/* Add a top bar on ascending sort */\n.bar-sort-header[aria-sort=\"ascending\"] {\n  box-shadow: inset 0 3px 0 0 rgba(0, 0, 0, 0.6);\n}\n\n/* Add a bottom bar on descending sort */\n.bar-sort-header[aria-sort=\"descending\"] {\n  box-shadow: inset 0 -3px 0 0 rgba(0, 0, 0, 0.6);\n}\n\n/* Add an animation when toggling between ascending and descending sort */\n.bar-sort-header {\n  transition: box-shadow 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n}\n&lt;/style&gt;",
    "crumbs": [
      "Get Started",
      "Style",
      "Custom sort indicators"
    ]
  },
  {
    "objectID": "get-started/extra-htmltools.html",
    "href": "get-started/extra-htmltools.html",
    "title": "Using reactable with htmltools",
    "section": "",
    "text": "The htmltools package provides classes for representing HTML elements in Python. It is used in two ways in reactable:\nThis page covers the basics of using htmltools with reactable.",
    "crumbs": [
      "Get Started",
      "Extra",
      "Using reactable with htmltools"
    ]
  },
  {
    "objectID": "get-started/extra-htmltools.html#htmltools-basics",
    "href": "get-started/extra-htmltools.html#htmltools-basics",
    "title": "Using reactable with htmltools",
    "section": "htmltools basics",
    "text": "htmltools basics\nhtmltools provides many functions whose names match the HTML elements they create.\nFor example, div() creates a &lt;div&gt; tag, p() creates a &lt;p&gt; tag, and so on.\n\nimport htmltools as ht\n\nht.div(\n    ht.strong(\"strong tag\"),\n    ht.p(\"This is a paragraph\"),\n)\n\n\n  strong tag\n  This is a paragraph\n\n\n\nIt also provides options for customizing HTML attributes (like class and id), creating custom elements, and representing siblings.\n\nSetting attributes\nKeyword arguments become attributes on the HTML element:\n\ntag = ht.p(\n    \"This is a paragraph\",\n    id=\"para1\",\n    class_=\"a-paragraph\",\n)\n\nprint(tag)\n\n&lt;p id=\"para1\" class=\"a-paragraph\"&gt;This is a paragraph&lt;/p&gt;\n\n\n\n\nTag: custom elements\nIf there’s no function for specific tag name, you can specify it manually with the Tag class:\n\nht.Tag(\"div\", \"some content\")\n\nsome content\n\n\n\n\nTagList: creating siblings\nUse TagList to represent two elements side-by-side, without a containing element.\n\ntag = ht.TagList(\n    ht.strong(\"strong tag\"),\n    ht.p(\"This is a paragraph\"),\n)\n\nprint(tag)\n\n&lt;strong&gt;strong tag&lt;/strong&gt;\n&lt;p&gt;This is a paragraph&lt;/p&gt;\n\n\n\n\ntags: lots of pre-defined tags\nThe htmltools.tags submodule has a much bigger set of tag functions to choose from!\n\nht.tags.sub(\"sub tag\")\n\nsub tag\n\n\n\n\nstyling with CSS\nIn order to apply CSS styles, use ht.tags.style:\n\nht.TagList(\n    ht.tags.style(\n        \"\"\"\n        .a-paragraph {\n            color: red;\n        }\n        \"\"\"\n    ),\n    ht.p(\"a paragraph\", class_=\"a-paragraph\"),\n)\n\n\na paragraph\n\n\nNote that we used a TagList, so that there’s a single output. This is important in Jupyter notebooks, since the last output is what gets displayed.\n(We also could have used the IPython.display.display function to manually display each tag.)",
    "crumbs": [
      "Get Started",
      "Extra",
      "Using reactable with htmltools"
    ]
  },
  {
    "objectID": "get-started/extra-htmltools.html#wrapping-a-table-with-htmltools",
    "href": "get-started/extra-htmltools.html#wrapping-a-table-with-htmltools",
    "title": "Using reactable with htmltools",
    "section": "Wrapping a table with htmltools",
    "text": "Wrapping a table with htmltools\nUse to_widget() when wrapping a Reactable() table in htmltools tags.\n\nimport htmltools as ht\nfrom reactable import Reactable, embed_css, to_widget\nfrom reactable.data import sleep\n\nembed_css()\n\ntbl = Reactable(sleep, default_page_size=5)\n\nto_widget(\n    ht.div(\n        ht.div(\n            ht.h3(\"This is the title of the table\", class_=\"title\"),\n            \"This is the subtitle.\",\n            class_=\"table-header\",\n        ),\n        tbl,\n        class_=\"table-wrapper\",\n    )\n)\n\n\n    \n    \n    \n    \n    \n\n\n\n\n\nNotice that the table rendered inside a div, with a title and subtitle.\nThe to_widget() function is needed because Reactable() uses ipyreact to render the table. Since it expects an ipyreact.Widget() to represent every html element, to_widget() converts all htmltools elements to widgets.\nThe conversion looks like this:\n\nimport ipyreact\nimport htmltools as ht\n\n# htmltools representation ----\nht.div(\n    ht.span(\n        \"content\",\n    ),\n    class_=\"some-div\",\n)\n\n# ipyreact representation ----\nipyreact.Widget(\n    _type=\"div\",\n    props={\"class\": \"some-div\"},\n    children=[\n        ipyreact.Widget(\n            _type=\"span\",\n            children=[\"content\"],\n        ),\n    ],\n)",
    "crumbs": [
      "Get Started",
      "Extra",
      "Using reactable with htmltools"
    ]
  },
  {
    "objectID": "get-started/extra-htmltools.html#customizing-rendering",
    "href": "get-started/extra-htmltools.html#customizing-rendering",
    "title": "Using reactable with htmltools",
    "section": "Customizing rendering",
    "text": "Customizing rendering\nhtmltools can also customize content rendered inside a table.\nHere’s an example of a custom render function that returns a span tag with a custom css class, depending on whether the cell value is positive or negative:\n\nimport htmltools as ht\nfrom reactable import Reactable, Column, CellInfo, embed_css\nfrom reactable.data import sleep\n\nembed_css()\n\n\ndef fmt_cell(ci: CellInfo):\n    if ci.value &gt; 0:\n        return ht.span(str(ci.value), class_=\"positive\")\n    else:\n        return ht.span(str(ci.value), class_=\"negative\")\n\n\ntag = fmt_cell(CellInfo(2, row_index=0, column_name=None))\nstr(tag)\n\n\n    \n    \n    \n    \n    \n\n\n'&lt;span class=\"positive\"&gt;2&lt;/span&gt;'\n\n\nNotice that we set a custom css class using the class_ argument. In order to set css, we need to create a style tag. Assuming you are in a Jupyter notebook, you can use the IPython.display module:\n\nfrom IPython.display import display, HTML\n\ndisplay(HTML(\n    \"\"\"\n&lt;style&gt;\n.positive {\n    color: green;\n}\n&lt;/style&gt;\n\"\"\"\n))\n\ntag\n\n\n\n\n\n2\n\n\nWith the css set, we can plug the renderer into the table:\n\nReactable(\n    sleep,\n    default_page_size=5,\n    columns={\"extra\": Column(cell=fmt_cell)},\n)",
    "crumbs": [
      "Get Started",
      "Extra",
      "Using reactable with htmltools"
    ]
  },
  {
    "objectID": "get-started/style-table.html",
    "href": "get-started/style-table.html",
    "title": "Table styling",
    "section": "",
    "text": "from reactable import Reactable, Column, embed_css\nfrom reactable.data import cars_93, starwars\n\n\nembed_css()\n\nstarwars_small = starwars[:5, :10]\n\n\n    \n    \n    \n    \n    \n\n\n\nHighlight rows on hover\n\nReactable(\n    starwars_small,\n    highlight=True,\n)\n\n\n\n\n\n\nBordered\n\nReactable(\n    starwars_small,\n    bordered=True,\n)\n\n\n\n\n\n\nBorderless\n\nReactable(\n    starwars_small,\n    borderless=True,\n)\n\n\n\n\n\n\nOutlined\n\nReactable(\n    starwars_small,\n    outlined=True,\n)\n\n\n\n\n\n\nStriped\n\nReactable(\n    starwars_small,\n    striped=True,\n)\n\n\n\n\n\n\nBordered + striped + highlighting\n\nReactable(\n    starwars_small,\n    bordered=True,\n    striped=True,\n    highlight=True,\n)\n\n\n\n\n\n\nOutlined + borderless\n\nReactable(\n    starwars_small,\n    outlined=True,\n    borderless=True,\n)\n\n\n\n\n\n\nCompact\n\nReactable(\n    starwars_small,\n    compact=True,\n)\n\n\n\n\n\n\nNo text wrapping\n\nimport polars as pl\nimport polars.selectors as cs\n\nReactable(\n    starwars[[\"name\", \"species\", \"films\"]],\n    wrap=False,\n    resizable=True,\n    bordered=True,\n    default_page_size=5,\n)\n\n\n\n\n\n\nFixed height + sticky header/footer\n\nimport htmltools\n\nReactable(\n    starwars_small,\n    height=270,\n    striped=True,\n    default_col_def=Column(\n        footer=lambda col_info: htmltools.div(col_info.name, style=\"font-weight: bold\")\n    ),\n)\n\n\n\n\n\n\nColumn widths\n\nReactable(\n    cars_93[:6, [\"make\", \"type\", \"weight\"]],\n    columns=[\n        Column(id=\"make\", min_width=200),\n        Column(id=\"type\", min_width=100),\n        Column(id=\"weight\", min_width=100),\n    ],\n    bordered=True,\n)\n\n\n\n\n\n\nNo full width\n\nReactable(\n    cars_93[:6, :5],\n    full_width=False,\n    bordered=True,\n    default_col_def=Column(min_width=120),\n)\n\n\n\n\nYou can also set a maximum or fixed width on the table:\n\nReactable(\n    cars_93[:6, :5],\n    full_width=False,\n    bordered=True,\n    default_col_def=Column(min_width=120),\n    # Set a maximum width on the table\n    style={\"max-width\": 650},\n    # or a fixed width:\n    width=650,\n)\n\n\n\n\n\n\nVertical alignment\n\nfrom htmltools import div\nfrom reactable.models import CellInfo\n\ndata = starwars[:6, [\"name\", \"height\", \"mass\", \"gender\", \"homeworld\", \"species\"]]\n\n\ndef render_species(ci: CellInfo):\n    species = data[ci.row_index, \"species\"]\n    species_name = species if species else \"Unknown\"\n    return div(\n        div(ci.value, style=\"font-weight: 600\"),\n        div(species_name, style=\"font-size: 0.75rem\"),\n    )\n\n\nReactable(\n    data,\n    columns=[\n        Column(\n            id=\"name\",\n            name=\"Character / Species\",\n            cell=render_species,\n        ),\n        Column(id=\"species\", show=False),\n    ],\n    default_col_def=Column(v_align=\"center\", header_v_align=\"bottom\"),\n    bordered=True,\n)\n\n\n\n\n\n\nCustom CSS\n\nfrom IPython.display import display, HTML\n\ndisplay(\n    HTML(\n        \"\"\"\n&lt;style&gt;\n.my-tbl {\n  border: 1px solid rgba(0, 0, 0, 0.1);\n}\n\n.my-header {\n  border-width: 1px;\n}\n\n.my-col {\n  border-right: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.my-row:hover {\n  background-color: #f5f8ff;\n}\n&lt;/style&gt;\n\"\"\"\n    )\n)\n\nReactable(\n    starwars_small,\n    default_page_size=6,\n    borderless=True,\n    class_=\"my-tbl\",\n    default_col_def=Column(header_class=\"my-header\"),\n    columns=[\n        Column(id=\"name\", class_=\"my-col\"),\n    ],\n    row_class=\"my-row\",\n)",
    "crumbs": [
      "Get Started",
      "Style",
      "Table styling"
    ]
  },
  {
    "objectID": "get-started/code-structure.html",
    "href": "get-started/code-structure.html",
    "title": "Code basics",
    "section": "",
    "text": "This page covers the basics of making a simple reactable table:\nCode\nfrom reactable import embed_css\nfrom reactable.models import Reactable, ColGroup, Column, ColFormat, Theme, Language\nfrom reactable.data import cars_93\n\nembed_css()\n\ncars = cars_93[:3, [\"manufacturer\", \"model\", \"type\", \"price\", \"min_price\", \"max_price\"]]\n\nfmt = ColFormat(prefix=\"$\", digits=2)\n\nReactable(\n    cars,\n    columns={\n        \"manufacturer\": Column(name=\"Manufacturer\"),\n        \"model\": Column(name=\"Model\"),\n        \"type\": Column(name=\"Type\"),\n        \"max_price\": Column(name=\"Max\", format=fmt),\n        \"min_price\": Column(name=\"Min\", format=fmt),\n        \"price\": Column(name=\"Amount\", format=fmt),\n    },\n    column_groups=[\n        ColGroup(\n            name=\"Price\",\n            columns=[\"price\", \"min_price\", \"max_price\"],\n        ),\n    ],\n    bordered=True,\n    theme=Theme(\n        cell_padding=\"8px 12px\",\n    ),\n    language=Language(\n        page_next=\"SLAM THE NEXT PAGE\",\n        page_previous=\"GO BACK\",\n    ),\n    filterable=True,\n    default_page_size=2,\n)",
    "crumbs": [
      "Get Started",
      "Code basics"
    ]
  },
  {
    "objectID": "get-started/code-structure.html#setup-and-data",
    "href": "get-started/code-structure.html#setup-and-data",
    "title": "Code basics",
    "section": "Setup and data",
    "text": "Setup and data\nIn order to create the table, we’ll import classes from reactable, along with an example dataset.\n\nfrom reactable import embed_css\nfrom reactable.models import Reactable, ColGroup, Column, ColFormat, Theme, Language\nfrom reactable.data import cars_93\n\n# embed_css()\n\ncars = cars_93[:3, [\"manufacturer\", \"model\", \"type\", \"price\", \"min_price\", \"max_price\"]]\n\nNote two important pieces:\n\nembed_css() is currently required once, in order to add the necessary CSS.\ncars_93 is a tiny built-in DataFrame implementation called SimpleFrame.\n\nIn this walkthrough, we’ll turn the cars data directly into a reactable table. If you want to explore the data, use methods like .to_polars() or .to_pandas() to convert it to a Polars or Pandas DataFrame, respectively.\n\ncars.to_polars()\n\n\nshape: (3, 6)\n\n\n\nmanufacturer\nmodel\ntype\nprice\nmin_price\nmax_price\n\n\nstr\nstr\nstr\nf64\nf64\nf64\n\n\n\n\n\"Acura\"\n\"Integra\"\n\"Small\"\n15.9\n12.9\n18.8\n\n\n\"Acura\"\n\"Legend\"\n\"Midsize\"\n33.9\n29.2\n38.7\n\n\n\"Audi\"\n\"90\"\n\"Compact\"\n29.1\n25.9\n32.3",
    "crumbs": [
      "Get Started",
      "Code basics"
    ]
  },
  {
    "objectID": "get-started/code-structure.html#reactable",
    "href": "get-started/code-structure.html#reactable",
    "title": "Code basics",
    "section": "Reactable",
    "text": "Reactable\nThe Reactable() class is responsible for building the table:\n\nReactable(\n    cars,\n    filterable=True,\n    default_page_size=2,\n)\n\n\n\n\nThe code above used filterable=True argument added filters to the top of each column, and default_page_size=2 to limit each page to 2 rows. Reactable() has many optional parameters, designed for quick customization of pieces like sorting, filtering, searching, and pagination.\nIt also has four parameters which combine with other classes for configuration:\n\n\n\n\n\n\n\nname\ndescription\n\n\n\n\ncolumns=\nuse Column() to customize column names, format, and more.\n\n\ncolumn_groups=\nuse ColGroup() to group columns together, with a label.\n\n\ntheme=\nuse Theme() to customize table styling.\n\n\nlanguage=\nuse Language() to customize prompts like “Next page”.\n\n\n\nThe following sections walk through these four parameters in depth.",
    "crumbs": [
      "Get Started",
      "Code basics"
    ]
  },
  {
    "objectID": "get-started/code-structure.html#column-definitions",
    "href": "get-started/code-structure.html#column-definitions",
    "title": "Code basics",
    "section": "Column definitions",
    "text": "Column definitions\nThe columns= argument uses the Column() class to customize pieces like column name and value formatting (e.g. as a date or currency).\nBelow, we configure the name and format of the \"max_price\" column:\n\nReactable(\n    cars,\n    columns={\n        \"max_price\": Column(\n            name=\"Max Price\",\n            format=ColFormat(prefix=\"$\", digits=2),\n        ),\n    },\n)\n\n\n\n\nNotice these three pieces above:\n\ncolumns= maps columns of data to Column() configurations.\nColumn(name=...) cleans up the name displayed to “Max Price”\nColumn(format=...) uses ColFormat() to specify how to format column values.\n\nThe code above handled a single price column, but there are three related to price that need formatting. To avoid too much duplication, we can assign ColFormat() to a variable, and re-use that for each column definition.\n\nfmt = ColFormat(prefix=\"$\", digits=2)\n\nReactable(\n    cars,\n    columns={\n        \"max_price\": Column(name=\"Max Price\", format=fmt),\n        \"min_price\": Column(name=\"Min Price\", format=fmt),\n        \"price\": Column(name=\"Price\", format=fmt),\n    },\n)\n\n\n\n\n\n\n\n\n\n\nColumn arguments take priority\n\n\n\nNote that Reactable and Column share some arguments, like filterable=. When both specify one of these arguments, Column() takes priority:\n\nReactable(\n    cars,\n    filterable=True,\n    columns={\n        \"max_price\": Column(filterable=False),\n    },\n)\n\n\n\n\nNotice that the \"max_price\" column is not filterable.",
    "crumbs": [
      "Get Started",
      "Code basics"
    ]
  },
  {
    "objectID": "get-started/code-structure.html#column-groups-colgroup",
    "href": "get-started/code-structure.html#column-groups-colgroup",
    "title": "Code basics",
    "section": "Column groups (ColGroup)",
    "text": "Column groups (ColGroup)\nThe column_groups= argument uses the ColGroup() class to create groupings of columns. This allows you to put a custom label over related columns.\n\nReactable(\n    cars,\n    column_groups=[\n        ColGroup(\n            name=\"Price\",\n            columns=[\"price\", \"min_price\", \"max_price\"],\n        ),\n    ],\n)",
    "crumbs": [
      "Get Started",
      "Code basics"
    ]
  },
  {
    "objectID": "get-started/code-structure.html#theme",
    "href": "get-started/code-structure.html#theme",
    "title": "Code basics",
    "section": "Theme",
    "text": "Theme\nThe theme= argument uses the Theme() class to customize the overall style of the table.\n\nReactable(\n    cars,\n    bordered=True,\n    theme=Theme(\n        cell_padding=\"8px 12px\",\n    ),\n)",
    "crumbs": [
      "Get Started",
      "Code basics"
    ]
  },
  {
    "objectID": "get-started/code-structure.html#language",
    "href": "get-started/code-structure.html#language",
    "title": "Code basics",
    "section": "Language",
    "text": "Language\nThe language= argument uses the Language() class to customize text prompts on the table like “Next Page”.\n\nReactable(\n    cars,\n    language=Language(\n        page_next=\"TAKE ME TO THE NEXT PAGE\",\n        page_previous=\"GO BACK\",\n    ),\n    default_page_size=2,\n)",
    "crumbs": [
      "Get Started",
      "Code basics"
    ]
  },
  {
    "objectID": "get-started/code-structure.html#putting-it-all-together",
    "href": "get-started/code-structure.html#putting-it-all-together",
    "title": "Code basics",
    "section": "Putting it all together",
    "text": "Putting it all together\nIn the sections above, we customized the columns, column groupings, theme, and language individually. Now we’ll put it all together to make the complete table.\n\nfmt = ColFormat(prefix=\"$\", digits=2)\n\nReactable(\n    cars,\n    columns={\n        \"manufacturer\": Column(name=\"Manufacturer\"),\n        \"model\": Column(name=\"Model\"),\n        \"type\": Column(name=\"Type\"),\n        \"max_price\": Column(name=\"Max\", format=fmt),\n        \"min_price\": Column(name=\"Min\", format=fmt),\n        \"price\": Column(name=\"Amount\", format=fmt),\n    },\n    column_groups=[\n        ColGroup(\n            name=\"Price\",\n            columns=[\"price\", \"min_price\", \"max_price\"],\n        ),\n    ],\n    bordered=True,\n    theme=Theme(\n        cell_padding=\"8px 12px\",\n    ),\n    language=Language(\n        page_next=\"SLAM THE NEXT PAGE\",\n        page_previous=\"GO BACK\",\n    ),\n    filterable=True,\n    default_page_size=2,\n)",
    "crumbs": [
      "Get Started",
      "Code basics"
    ]
  },
  {
    "objectID": "get-started/controls-pagination.html",
    "href": "get-started/controls-pagination.html",
    "title": "Pagination",
    "section": "",
    "text": "from reactable import Reactable, embed_css\nfrom reactable.data import cars_93\n\nembed_css()\n\n\n    \n    \n    \n    \n    \n\n\nYou can change the default page size by configuring default_page_size:\n\nReactable(cars_93, default_page_size=4)\n\n\n\n\nYou can also set the minimum rows per page using min_rows. This may be useful when rows don’t completely fill the page, or if the table has filtering:\n\nReactable(cars_93, default_page_size=4, min_rows=4, searchable=True)\n\n\n\n\n\nPage size options\nYou can show a dropdown of page sizes for users to choose from using show_page_size_options. The page size options can be customized through page_size_options:\n\nReactable(\n    cars_93,\n    show_page_size_options=True,\n    page_size_options=[4, 8, 12],\n    default_page_size=4,\n)\n\n\n\n\n\n\nAlternative pagination types\nYou can use an alternative pagination type by setting pagination_type to:\n\n\"jump\" to show a page jump\n\"simple\" to show previous/next buttons only\n\n\nPage jump\n\nReactable(\n    cars_93,\n    pagination_type=\"jump\",\n    default_page_size=4,\n)\n\n\n\n\n\n\nSimple\n\nReactable(\n    cars_93,\n    pagination_type=\"simple\",\n    default_page_size=4,\n)\n\n\n\n\n\n\n\nHide page info\n\nReactable(\n    cars_93,\n    show_page_info=False,\n    default_page_size=4,\n)\n\n\n\n\n\nReactable(\n    cars_93,\n    show_page_info=False,\n    show_page_size_options=True,\n    default_page_size=4,\n)\n\n\n\n\n\n\nAlways show pagination\nBy default, pagination is hidden if the table only has one page. To keep the pagination shown, set show_pagination=True. This is especially useful if you want to keep the page info showing the number of rows in the table.\n\nReactable(\n    cars_93,\n    show_pagination=True,\n)\n\n\n\n\n\n\nNo pagination\nTables are paginated by default, but you can disable pagination by setting pagination=False:\n\nReactable(\n    cars_93,\n    pagination=False,\n    highlight=True,\n    height=250,\n)\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nDisabling pagination is not recommended for large tables with many interactive elements (such as links, expand buttons, or selection checkboxes), as that can make it difficult for keyboard users to navigate the page.",
    "crumbs": [
      "Get Started",
      "Controls",
      "Pagination"
    ]
  },
  {
    "objectID": "get-started/index.html",
    "href": "get-started/index.html",
    "title": "Get Started",
    "section": "",
    "text": "reactable is a Python library for interactively viewing DataFrames. It focuses on three things:",
    "crumbs": [
      "Get Started"
    ]
  },
  {
    "objectID": "get-started/index.html#install",
    "href": "get-started/index.html#install",
    "title": "Get Started",
    "section": "Install",
    "text": "Install\npip install reactable",
    "crumbs": [
      "Get Started"
    ]
  },
  {
    "objectID": "get-started/index.html#previewing-dataframes",
    "href": "get-started/index.html#previewing-dataframes",
    "title": "Get Started",
    "section": "Previewing DataFrames",
    "text": "Previewing DataFrames\n\nfrom reactable import Reactable, embed_css\nfrom reactable.data import cars_93\n\n# Note that currently this function is required\n# to put css into notebooks.\nembed_css()\n\n\nReactable(\n    cars_93[[\"manufacturer\", \"model\", \"type\", \"price\"]],\n    default_page_size=5,\n    searchable=True,\n    filterable=True,\n)",
    "crumbs": [
      "Get Started"
    ]
  },
  {
    "objectID": "get-started/index.html#using-with-pandas-and-polars",
    "href": "get-started/index.html#using-with-pandas-and-polars",
    "title": "Get Started",
    "section": "Using with pandas and polars",
    "text": "Using with pandas and polars\nreactable built-in datasets, like cars_93 don’t any DataFrame libraries. They include methods like .to_pandas() and .to_polars(), to quickly try out reactable with your preferred DataFrame tool.\n\nfrom reactable import Reactable, embed_css\nfrom reactable.data import cars_93\n\nReactable(\n    cars_93.to_polars(),\n    default_page_size=5,\n)",
    "crumbs": [
      "Get Started"
    ]
  },
  {
    "objectID": "get-started/index.html#extensive-customization",
    "href": "get-started/index.html#extensive-customization",
    "title": "Get Started",
    "section": "Extensive customization",
    "text": "Extensive customization\nSee twitter demo for more",
    "crumbs": [
      "Get Started"
    ]
  },
  {
    "objectID": "get-started/format-custom-rendering-js.html",
    "href": "get-started/format-custom-rendering-js.html",
    "title": "Javascript formatters",
    "section": "",
    "text": "import polars as pl\nimport htmltools as html\nfrom reactable.data import cars_93\nfrom reactable import Reactable, reactable, embed_css\nfrom reactable.models import Column, ColInfo, CellInfo, HeaderCellInfo, RowInfo, JS\n\nembed_css()\n\ndata = cars_93[20:25, [\"manufacturer\", \"model\", \"type\", \"price\"]]",
    "crumbs": [
      "Get Started",
      "Extra",
      "Javascript formatters"
    ]
  },
  {
    "objectID": "get-started/format-custom-rendering-js.html#cell",
    "href": "get-started/format-custom-rendering-js.html#cell",
    "title": "Javascript formatters",
    "section": "Cell",
    "text": "Cell\n\ncolumn = Column(\n    cell=JS(\n        \"\"\"\n    function(cellInfo, state) {\n      // input:\n      //  - cellInfo, an object containing cell info\n      //  - state, an object containing the table state (optional)\n      //\n      // output:\n      //  - content to render (e.g. an HTML string)\n      return `&lt;div&gt;&lt;b&gt;${cellInfo.value}&lt;/b&gt;&lt;/div&gt;`\n    }\n  \"\"\"\n    ),\n    html=True,  # to render as HTML\n)\n\nReactable(data, columns={\"manufacturer\": column})\n\n\n\n\n\n\n\n\n\n\ncellInfo properties",
    "crumbs": [
      "Get Started",
      "Extra",
      "Javascript formatters"
    ]
  },
  {
    "objectID": "get-started/format-custom-rendering-js.html#headers",
    "href": "get-started/format-custom-rendering-js.html#headers",
    "title": "Javascript formatters",
    "section": "Headers",
    "text": "Headers\n\ncolumn = Column(\n    header=JS(\n        \"\"\"\n    function(column, state) {\n      // input:\n      //  - column, an object containing column properties\n      //  - state, an object containing the table state (optional)\n      //\n      // output:\n      //  - content to render (e.g. an HTML string)\n      return `&lt;div&gt;&lt;em&gt;${column.name}&lt;/em&gt;&lt;/div&gt;`\n    }\n  \"\"\"\n    ),\n    html=True,  # to render as HTML\n)\n\nReactable(\n    data,\n    columns={\"price\": column},\n)\n\n\n\n\n\n\n\n\n\n\ncolumn properties",
    "crumbs": [
      "Get Started",
      "Extra",
      "Javascript formatters"
    ]
  },
  {
    "objectID": "get-started/format-custom-rendering-js.html#footers",
    "href": "get-started/format-custom-rendering-js.html#footers",
    "title": "Javascript formatters",
    "section": "Footers",
    "text": "Footers\n\ncolumn = Column(\n    footer=JS(\n        \"\"\"\n    function(column, state) {\n      // input:\n      //  - column, an object containing column properties\n      //  - state, an object containing the table state (optional)\n      //\n      // output:\n      //  - content to render (e.g. an HTML string)\n      return `&lt;div&gt;Rows: ${state.sortedData.length}&lt;/div&gt;`\n    }\n  \"\"\"\n    ),\n    html=True,  # to render as HTML\n)\n\nReactable(data, columns={\"price\": column})\n\n\n\n\n\n\n\n\n\n\ncolumn properties",
    "crumbs": [
      "Get Started",
      "Extra",
      "Javascript formatters"
    ]
  },
  {
    "objectID": "get-started/format-custom-rendering-js.html#expandable-row-details",
    "href": "get-started/format-custom-rendering-js.html#expandable-row-details",
    "title": "Javascript formatters",
    "section": "Expandable row details",
    "text": "Expandable row details\n\nReactable(\n    data,\n    details=JS(\n        \"\"\"\n          function(rowInfo, state) {\n            // input:\n            //  - rowInfo, an object containing row info\n            //  - state, an object containing the table state (optional)\n            //\n            // output:\n            //  - content to render (e.g. an HTML string)\n            return `&lt;div&gt;Details for row: ${rowInfo.index}&lt;/div&gt;`\n          }\n        \"\"\"\n    ),\n)\n\n\n\n\n\n\n\n\n\n\nrowInfo properties",
    "crumbs": [
      "Get Started",
      "Extra",
      "Javascript formatters"
    ]
  },
  {
    "objectID": "get-started/format-custom-rendering-js.html#javascript-state-properties",
    "href": "get-started/format-custom-rendering-js.html#javascript-state-properties",
    "title": "Javascript formatters",
    "section": "Javascript state properties",
    "text": "Javascript state properties",
    "crumbs": [
      "Get Started",
      "Extra",
      "Javascript formatters"
    ]
  },
  {
    "objectID": "get-started/style-conditional-js.html",
    "href": "get-started/style-conditional-js.html",
    "title": "Javascript styling",
    "section": "",
    "text": "from reactable import Reactable, Column, JS, embed_css\nfrom reactable.data import cars_93, sleep\n\nembed_css()",
    "crumbs": [
      "Get Started",
      "Extra",
      "Javascript styling"
    ]
  },
  {
    "objectID": "get-started/style-conditional-js.html#cell-style",
    "href": "get-started/style-conditional-js.html#cell-style",
    "title": "Javascript styling",
    "section": "Cell style",
    "text": "Cell style\n\njs_style = JS(\n    \"\"\"function(rowInfo) {\n      const value = rowInfo.values['extra']\n      let color\n      if (value &gt; 0) {\n        color = '#008000'\n      } else if (value &lt; 0) {\n        color = '#e00000'\n      } else {\n        color = '#777'\n      }\n      return { color: color, fontWeight: 'bold' }\n    }\"\"\"\n)\nReactable(\n    sleep[:6, :],\n    columns=[\n        Column(\n            id=\"extra\",\n            style=js_style,\n        )\n    ],\n)",
    "crumbs": [
      "Get Started",
      "Extra",
      "Javascript styling"
    ]
  },
  {
    "objectID": "get-started/style-conditional-js.html#row-style",
    "href": "get-started/style-conditional-js.html#row-style",
    "title": "Javascript styling",
    "section": "Row style",
    "text": "Row style\n\nReactable(\n    sleep[:6, :],\n    row_style=JS(\n        \"\"\"function(rowInfo) {\n    if (rowInfo.values['extra'] &lt; -1) {\n      return { background: 'rgba(0, 0, 0, 0.05)' }\n    }\n  }\"\"\"\n    ),\n    row_class=JS(\n        \"\"\"function(rowInfo) {\n    if (rowInfo.values['extra'] &lt; -1) {\n      return 'bold'\n    }\n  }\"\"\"\n    ),\n)",
    "crumbs": [
      "Get Started",
      "Extra",
      "Javascript styling"
    ]
  },
  {
    "objectID": "get-started/style-conditional-js.html#metadata",
    "href": "get-started/style-conditional-js.html#metadata",
    "title": "Javascript styling",
    "section": "Metadata",
    "text": "Metadata\nYou can pass arbitrary data from Python to JavaScript style functions using the meta argument in reactable().\nmeta should be a named list of values that can also be JS() expressions or functions. Custom metadata can be accessed from JavaScript using the state.meta property, and updated using updateReactable() in Shiny or Reactable.setMeta() in the JavaScript API.\nUse custom metadata to:\nSimplify JavaScript style functions that need access to data outside of the table Dynamically change how data is styled without rerendering the table Share JavaScript code or data between different style functions\n\nfrom IPython.display import display\n\ncars = cars_93[:6, [\"manufacturer\", \"model\", \"type\", \"price\", \"mpg_city\"]]\n\njs_mpg_background = JS(\n    \"\"\"function(rowInfo, column, state) {\n        const { showColors, mpgColor } = state.meta\n        if (showColors) {\n            return { \n              backgroundColor: rowInfo.values[column.id] &gt; 20 ? mpgColor : 'transparent'\n            }\n        }\n    }\n\"\"\"\n)\n\nbb = Reactable(\n    cars,\n    columns=[\n        Column(\n            id=\"mpg_city\",\n            style=js_mpg_background,\n        )\n    ],\n    meta={\n        # yellow\n        \"mpgColor\": \"#ff9f1a\",\n        \"showColors\": True,\n    },\n    element_id=\"cars-colors-table\",\n)\n\nimport htmltools as ht\n\nclicker = ht.TagList(\n    ht.tags.label(\n        ht.tags.input(\n            type=\"checkbox\",\n            checked=None,\n            onclick=\"Reactable.setMeta('cars-colors-table', function(prevMeta) { return { showColors: !prevMeta.showColors } })\",\n        ),\n        \"Show color scale\",\n    ),\n)\n\ndisplay(bb)\nclicker\n\n\n\n\nShow color scale",
    "crumbs": [
      "Get Started",
      "Extra",
      "Javascript styling"
    ]
  },
  {
    "objectID": "get-started/structure-column-groups.html",
    "href": "get-started/structure-column-groups.html",
    "title": "Column headers",
    "section": "",
    "text": "import polars as pl\n\nfrom reactable import Reactable, Column, ColGroup, embed_css\nfrom reactable.data import penguins\n\npl_penguins = penguins.to_polars()\n\nembed_css()\n\n\n    \n    \n    \n    \n    \n\n\nYou can create column groups by passing a list of ColGroup() definitions to column_groups=:\n\nReactable(\n    pl_penguins[:5, [\"species\", \"island\", \"bill_length_mm\", \"bill_depth_mm\"]],\n    columns=[\n        Column(id=\"bill_length_mm\", name=\"Length (mm)\"),\n        Column(id=\"bill_depth_mm\", name=\"Depth (mm)\"),\n        Column(id=\"species\", name=\"Species\"),\n        Column(id=\"island\", name=\"Island\"),\n    ],\n    column_groups=[\n        ColGroup(name=\"Bill\", columns=[\"bill_length_mm\", \"bill_depth_mm\"]),\n    ],\n)",
    "crumbs": [
      "Get Started",
      "Structure",
      "Column headers"
    ]
  },
  {
    "objectID": "get-started/display-export.html",
    "href": "get-started/display-export.html",
    "title": "Displaying tables",
    "section": "",
    "text": "reactable tables can be displayed in a number of environments, include Jupyter notebooks, VS Code, and quarto documents (.qmd). Moreover, the package htmltools can be used to customize HTML in and around the table.\nFor the examples on this page, we’ll use some commen reactable functions, and the sleep dataset.\nfrom reactable import Reactable, embed_css, to_widget\nfrom reactable.data import sleep",
    "crumbs": [
      "Get Started",
      "Displaying tables"
    ]
  },
  {
    "objectID": "get-started/display-export.html#basics",
    "href": "get-started/display-export.html#basics",
    "title": "Displaying tables",
    "section": "Basics",
    "text": "Basics\nIn order to display a table, be sure to call embed_css() once per notebook or qmd file.\n\nembed_css()\n\nReactable(sleep[:3])\n\n\n    \n    \n    \n    \n    \n\n\n\n\n\nEmbedding css adds the necessary CSS styles to the document, so that the table is laid out correctly.",
    "crumbs": [
      "Get Started",
      "Displaying tables"
    ]
  },
  {
    "objectID": "get-started/display-export.html#custom-css-styles",
    "href": "get-started/display-export.html#custom-css-styles",
    "title": "Displaying tables",
    "section": "Custom CSS styles",
    "text": "Custom CSS styles\nIn order to apply custom CSS styles, they need to be added to the notebook or qmd file. One way to do this is using the display() function from IPython.\n\nfrom IPython.display import display, HTML\n\ndisplay(\n    HTML(\n        \"\"\"\n    &lt;style&gt;\n    .sleep-table {\n      font-family: Courier New, sans-serif;\n    }\n    &lt;/style&gt;\n    \"\"\"\n    )\n)\n\nReactable(sleep[:3], class_=\"sleep-table\")",
    "crumbs": [
      "Get Started",
      "Displaying tables"
    ]
  },
  {
    "objectID": "get-started/display-export.html#using-with-htmltools",
    "href": "get-started/display-export.html#using-with-htmltools",
    "title": "Displaying tables",
    "section": "Using with htmltools",
    "text": "Using with htmltools\nOftentimes, it’s useful to wrap tables in additional HTML elements, like a div with a title in it. This can be done using the htmltools package.\nThe example below shows adding an &lt;h3&gt; title to a table.\n\nimport htmltools as ht\n\n\ntag = ht.div(\n    ht.h3(\"Sleep data\", style=ht.css(color=\"red\")),\n    Reactable(sleep[:3]),\n)\n\nto_widget(tag)\n\n\n\n\nNotice two important pieces:\n\nh3() allows setting the html style attribute using the style= argument.\nto_widget() is necessary to convert htmltools objects with reactable tables inside them, into a widget that can be displayed in the notebook.\n\nSee “Using reactable with htmltools” for more examples.",
    "crumbs": [
      "Get Started",
      "Displaying tables"
    ]
  },
  {
    "objectID": "get-started/display-export.html#using-with-ipyreact",
    "href": "get-started/display-export.html#using-with-ipyreact",
    "title": "Displaying tables",
    "section": "Using with ipyreact",
    "text": "Using with ipyreact\nreactable uses ipyreact under the hood to render tables. This means that you can use ipyreact.Widget to create additional HTML elements and react components around the table.\n\nimport anywidget\nimport ipyreact\n\nipyreact.Widget(\n    _type=\"div\",\n    children=[\n        ipyreact.Widget(_type=\"h3\", children=\"Sleep data\"),\n        Reactable(sleep[:3]).to_widget(),\n    ],\n)",
    "crumbs": [
      "Get Started",
      "Displaying tables"
    ]
  },
  {
    "objectID": "get-started/format-custom-rendering.html",
    "href": "get-started/format-custom-rendering.html",
    "title": "Custom rendering (python)",
    "section": "",
    "text": "import htmltools as html\n\nfrom reactable.data import cars_93\nfrom reactable import Reactable, Column, embed_css\n\nembed_css()\n\ndata = cars_93[20:25, [\"manufacturer\", \"model\", \"type\", \"price\"]]"
  },
  {
    "objectID": "get-started/format-custom-rendering.html#cells",
    "href": "get-started/format-custom-rendering.html#cells",
    "title": "Custom rendering (python)",
    "section": "Cells",
    "text": "Cells\n\nfrom reactable.models import CellInfo\n\ndef fmt_cell_red(ci: CellInfo):\n    return html.div(ci.value.upper(), style=\"color: red\")\n\n\nReactable(\n    data,\n    columns={\"manufacturer\": Column(cell=fmt_cell_red)},\n)"
  },
  {
    "objectID": "get-started/format-custom-rendering.html#headers",
    "href": "get-started/format-custom-rendering.html#headers",
    "title": "Custom rendering (python)",
    "section": "Headers",
    "text": "Headers\n\nfrom reactable.models import  HeaderCellInfo \n\ndef fmt_header(ci: HeaderCellInfo):\n    return html.div(f\"name: {ci.name}\", html.br(), f\"value: {ci.value}\")\n\n\nReactable(\n    data,\n    columns={\"manufacturer\": Column(header=fmt_header, name=\"Manufacturer\")},\n)"
  },
  {
    "objectID": "get-started/format-custom-rendering.html#footers",
    "href": "get-started/format-custom-rendering.html#footers",
    "title": "Custom rendering (python)",
    "section": "Footers",
    "text": "Footers\n\nfrom reactable.models import ColInfo\n\ndef fmt_footer(ci: ColInfo):\n    ttl = sum(ci.values)\n    return f\"${ttl:.2f}\"\n\n\nReactable(\n    data,\n    searchable=True,\n    columns={\"price\": Column(footer=fmt_footer)},\n)\n\n\n\n\nNote that a sum of $79.10 appears at the bottom right of the table. Importantly, if you filter the rows by typing into the search box, the sum won’t update. This is because Python footers are rendered only once, when generating the initial table."
  },
  {
    "objectID": "get-started/format-custom-rendering.html#expandable-row-details",
    "href": "get-started/format-custom-rendering.html#expandable-row-details",
    "title": "Custom rendering (python)",
    "section": "Expandable row details",
    "text": "Expandable row details\n\nfrom reactable.models import RowInfo\n\n\n# TODO: explain use of to_widget\ndef fmt_details(ci: RowInfo):\n    return html.div(\n        f\"Details for row: {ci.row_index}\",\n        Reactable(data[ci.row_index, :]).to_widget(),\n    )\n\n\nReactable(\n    data[[\"model\"]],\n    details=fmt_details,\n)"
  },
  {
    "objectID": "get-started/format-custom-rendering.html#why-use-javascript-dynamic-filtering",
    "href": "get-started/format-custom-rendering.html#why-use-javascript-dynamic-filtering",
    "title": "Custom rendering (python)",
    "section": "Why use javascript? Dynamic filtering",
    "text": "Why use javascript? Dynamic filtering\n\nfrom reactable.models import JS\n\njs_footer = JS(\n    \"\"\"\nfunction(column, state) {\n  let total = 0\n  state.sortedData.forEach(function(row) {\n    total += row[column.id]\n  })\n  return '&lt;b&gt;$' + total.toFixed(2) + '&lt;/b&gt;'\n}\"\"\"\n)\n\nReactable(\n    data,\n    searchable=True,\n    columns={\n        \"price\": Column(\n            html=True,\n            footer=js_footer,\n        ),\n    },\n)"
  },
  {
    "objectID": "get-started/format-details.html",
    "href": "get-started/format-details.html",
    "title": "Rendering details",
    "section": "",
    "text": "import htmltools as html\n\nfrom reactable.data import cars_93\nfrom reactable import Reactable, Column, embed_css\n\nembed_css()\n\ndata = cars_93[20:25, [\"manufacturer\", \"model\", \"type\", \"price\"]]",
    "crumbs": [
      "Get Started",
      "Format",
      "Rendering details"
    ]
  },
  {
    "objectID": "get-started/format-details.html#basic-expandable-row-details",
    "href": "get-started/format-details.html#basic-expandable-row-details",
    "title": "Rendering details",
    "section": "Basic expandable row details",
    "text": "Basic expandable row details\n\nfrom reactable.models import RowInfo\n\n\n# TODO: explain use of to_widget\ndef fmt_details(ci: RowInfo):\n    return html.div(\n        f\"Details for row: {ci.row_index}\",\n        Reactable(data[ci.row_index, :]).to_widget(),\n    )\n\n\nReactable(\n    data[[\"model\"]],\n    details=fmt_details,\n)",
    "crumbs": [
      "Get Started",
      "Format",
      "Rendering details"
    ]
  },
  {
    "objectID": "reference/JS.html",
    "href": "reference/JS.html",
    "title": "JS",
    "section": "",
    "text": "JS(self, code)\nA javascript function for rendering.\n\n\ncode: The javascript code. This should be a javascript function, and will be evaluated when the Reactable table is rendered."
  },
  {
    "objectID": "reference/JS.html#parameters",
    "href": "reference/JS.html#parameters",
    "title": "JS",
    "section": "",
    "text": "code: The javascript code. This should be a javascript function, and will be evaluated when the Reactable table is rendered."
  },
  {
    "objectID": "reference/Theme.html",
    "href": "reference/Theme.html",
    "title": "Theme",
    "section": "",
    "text": "Theme(\n    self,\n    color=None,\n    background_color=None,\n    border_color=None,\n    border_width=None,\n    striped_color=None,\n    highlight_color=None,\n    cell_padding=None,\n    style=None,\n    table_style=None,\n    header_style=None,\n    group_header_style=None,\n    table_body_style=None,\n    row_group_style=None,\n    row_style=None,\n    row_striped_style=None,\n    row_highlight_style=None,\n    row_selected_style=None,\n    cell_style=None,\n    footer_style=None,\n    input_style=None,\n    filter_input_style=None,\n    search_input_style=None,\n    select_style=None,\n    pagination_style=None,\n    page_button_style=None,\n    page_button_hover_style=None,\n    page_button_active_style=None,\n    page_button_current_style=None,\n)\nTheme configuration.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncolor\nstr | None\nDefault text color.\nNone\n\n\nbackground_color\nstr | None\nDefault background color.\nNone\n\n\nborder_color\nstr | None\nDefault border color.\nNone\n\n\nborder_width\nstr | None\nDefault border width.\nNone\n\n\nstriped_color\nstr | None\nDefault row stripe color.\nNone\n\n\nhighlight_color\nstr | None\nDefault row highlight color.\nNone\n\n\ncell_padding\nstr | None\nDefault cell padding.\nNone\n\n\nstyle\nCssRules | None\nAdditional CSS for the table.\nNone\n\n\ntable_style\nCssRules | None\nAdditional CSS for the table element (excludes the pagination bar and search input).\nNone\n\n\nheader_style\nCssRules | None\nAdditional CSS for header cells.\nNone\n\n\ngroup_header_style\nCssRules | None\nAdditional CSS for group header cells.\nNone\n\n\ntable_body_style\nCssRules | None\nAdditional CSS for the table body element.\nNone\n\n\nrow_group_style\nCssRules | None\nAdditional CSS for row groups.\nNone\n\n\nrow_style\nCssRules | None\nAdditional CSS for rows.\nNone\n\n\nrow_striped_style\nCssRules | None\nAdditional CSS for striped rows.\nNone\n\n\nrow_highlight_style\nCssRules | None\nAdditional CSS for highlighted rows.\nNone\n\n\nrow_selected_style\nCssRules | None\nAdditional CSS for selected rows.\nNone\n\n\ncell_style\nCssRules | None\nAdditional CSS for cells.\nNone\n\n\nfooter_style\nCssRules | None\nAdditional CSS for footer cells.\nNone\n\n\ninput_style\nCssRules | None\nAdditional CSS for inputs.\nNone\n\n\nfilter_input_style\nCssRules | None\nAdditional CSS for filter inputs.\nNone\n\n\nsearch_input_style\nCssRules | None\nAdditional CSS for the search input.\nNone\n\n\nselect_style\nCssRules | None\nAdditional CSS for table select controls.\nNone\n\n\npagination_style\nCssRules | None\nAdditional CSS for the pagination bar.\nNone\n\n\npage_button_style\nCssRules | None\nAdditional CSS for page buttons, page buttons with hover or active states, and the current page button.\nNone\n\n\npage_button_hover_style\nCssRules | None\nAdditional CSS for page buttons, page buttons with hover or active states, and the current page button.\nNone\n\n\npage_button_active_style\nCssRules | None\nAdditional CSS for page buttons, page buttons with hover or active states, and the current page button.\nNone\n\n\npage_button_current_style\nCssRules | None\nAdditional CSS for page buttons, page buttons with hover or active states, and the current page button.\nNone"
  },
  {
    "objectID": "reference/Theme.html#parameters",
    "href": "reference/Theme.html#parameters",
    "title": "Theme",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ncolor\nstr | None\nDefault text color.\nNone\n\n\nbackground_color\nstr | None\nDefault background color.\nNone\n\n\nborder_color\nstr | None\nDefault border color.\nNone\n\n\nborder_width\nstr | None\nDefault border width.\nNone\n\n\nstriped_color\nstr | None\nDefault row stripe color.\nNone\n\n\nhighlight_color\nstr | None\nDefault row highlight color.\nNone\n\n\ncell_padding\nstr | None\nDefault cell padding.\nNone\n\n\nstyle\nCssRules | None\nAdditional CSS for the table.\nNone\n\n\ntable_style\nCssRules | None\nAdditional CSS for the table element (excludes the pagination bar and search input).\nNone\n\n\nheader_style\nCssRules | None\nAdditional CSS for header cells.\nNone\n\n\ngroup_header_style\nCssRules | None\nAdditional CSS for group header cells.\nNone\n\n\ntable_body_style\nCssRules | None\nAdditional CSS for the table body element.\nNone\n\n\nrow_group_style\nCssRules | None\nAdditional CSS for row groups.\nNone\n\n\nrow_style\nCssRules | None\nAdditional CSS for rows.\nNone\n\n\nrow_striped_style\nCssRules | None\nAdditional CSS for striped rows.\nNone\n\n\nrow_highlight_style\nCssRules | None\nAdditional CSS for highlighted rows.\nNone\n\n\nrow_selected_style\nCssRules | None\nAdditional CSS for selected rows.\nNone\n\n\ncell_style\nCssRules | None\nAdditional CSS for cells.\nNone\n\n\nfooter_style\nCssRules | None\nAdditional CSS for footer cells.\nNone\n\n\ninput_style\nCssRules | None\nAdditional CSS for inputs.\nNone\n\n\nfilter_input_style\nCssRules | None\nAdditional CSS for filter inputs.\nNone\n\n\nsearch_input_style\nCssRules | None\nAdditional CSS for the search input.\nNone\n\n\nselect_style\nCssRules | None\nAdditional CSS for table select controls.\nNone\n\n\npagination_style\nCssRules | None\nAdditional CSS for the pagination bar.\nNone\n\n\npage_button_style\nCssRules | None\nAdditional CSS for page buttons, page buttons with hover or active states, and the current page button.\nNone\n\n\npage_button_hover_style\nCssRules | None\nAdditional CSS for page buttons, page buttons with hover or active states, and the current page button.\nNone\n\n\npage_button_active_style\nCssRules | None\nAdditional CSS for page buttons, page buttons with hover or active states, and the current page button.\nNone\n\n\npage_button_current_style\nCssRules | None\nAdditional CSS for page buttons, page buttons with hover or active states, and the current page button.\nNone"
  },
  {
    "objectID": "reference/ColGroup.html",
    "href": "reference/ColGroup.html",
    "title": "ColGroup",
    "section": "",
    "text": "ColGroup(\n    self,\n    name=None,\n    columns=None,\n    header=None,\n    html=None,\n    align=None,\n    header_v_align=None,\n    sticky=None,\n    header_class=None,\n    header_style=None,\n)\nConfigure a column group (spanner).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nname\nstr | None\nColumn group header name.\nNone\n\n\ncolumns\nlist[str] | None\nCharacter vector of column names in the group.\nNone\n\n\nheader\nCallable[[HeaderCellInfo], HTML] | JsFunction | None\nCustom header renderer. A Python function that takes a HeaderCellInfo() object, or a JS() function that takes a column object and table state object as arguments.\nNone\n\n\nhtml\nbool | None\nRender header content as HTML? Raw HTML strings are escaped by default.\nNone\n\n\nalign\nLiteral['left', 'right', 'center'] | None\nHorizontal alignment of content in the column group header. One of “left”, “right”, “center” (the default).\nNone\n\n\nheader_v_align\nLiteral['top', 'center', 'bottom'] | None\nVertical alignment of content in the column group header. One of “top” (the default), “center”, “bottom”.\nNone\n\n\nsticky\nLiteral['left', 'right'] | None\nMake the column group sticky when scrolling horizontally? Either “left” or “right”. If a column group is sticky, all columns in the group will automatically be made sticky.\nNone\n\n\nheader_class\nlist[str] | None\nAdditional CSS classes to apply to the header.\nNone\n\n\nheader_style\nCssStyles | None\nInline styles to apply to the header. A dictionary mapping CSS style names to values.\nNone"
  },
  {
    "objectID": "reference/ColGroup.html#parameters",
    "href": "reference/ColGroup.html#parameters",
    "title": "ColGroup",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nname\nstr | None\nColumn group header name.\nNone\n\n\ncolumns\nlist[str] | None\nCharacter vector of column names in the group.\nNone\n\n\nheader\nCallable[[HeaderCellInfo], HTML] | JsFunction | None\nCustom header renderer. A Python function that takes a HeaderCellInfo() object, or a JS() function that takes a column object and table state object as arguments.\nNone\n\n\nhtml\nbool | None\nRender header content as HTML? Raw HTML strings are escaped by default.\nNone\n\n\nalign\nLiteral['left', 'right', 'center'] | None\nHorizontal alignment of content in the column group header. One of “left”, “right”, “center” (the default).\nNone\n\n\nheader_v_align\nLiteral['top', 'center', 'bottom'] | None\nVertical alignment of content in the column group header. One of “top” (the default), “center”, “bottom”.\nNone\n\n\nsticky\nLiteral['left', 'right'] | None\nMake the column group sticky when scrolling horizontally? Either “left” or “right”. If a column group is sticky, all columns in the group will automatically be made sticky.\nNone\n\n\nheader_class\nlist[str] | None\nAdditional CSS classes to apply to the header.\nNone\n\n\nheader_style\nCssStyles | None\nInline styles to apply to the header. A dictionary mapping CSS style names to values.\nNone"
  },
  {
    "objectID": "reference/Column.html",
    "href": "reference/Column.html",
    "title": "Column",
    "section": "",
    "text": "Column(\n    self,\n    name=None,\n    aggregate=None,\n    sortable=None,\n    resizable=None,\n    filterable=None,\n    searchable=None,\n    filter_method=None,\n    show=None,\n    default_sort_order=None,\n    sort_na_last=None,\n    format=None,\n    cell=None,\n    grouped=None,\n    aggregated=None,\n    header=None,\n    footer=None,\n    details=None,\n    html=None,\n    na=None,\n    row_header=None,\n    min_width=None,\n    max_width=None,\n    width=None,\n    align=None,\n    v_align=None,\n    header_v_align=None,\n    sticky=None,\n    class_=None,\n    style=None,\n    header_class=None,\n    header_style=None,\n    footer_class=None,\n    footer_style=None,\n    id=None,\n    type=None,\n    _selectable=False,\n)\nConfigure a table column.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nname\nstr | None\nThe name to display in the header.\nNone\n\n\naggregate\nLiteral['mean', 'sum', 'max', 'min', 'median', 'count', 'unique', 'frequency'] | JsFunction | None\nAggregate function to use when rows are grouped. The name of a built-in aggregate function or a custom JS() aggregate function. Built-in aggregate functions are: “mean”, “sum”, “max”, “min”, “median”, “count”, “unique”, and “frequency”. To enable row grouping, use the group_by argument in Reactable().\nNone\n\n\nsortable\nbool | None\nWhether to enable sorting. Overrides the table option.\nNone\n\n\nresizable\nbool | None\nWhether to enable column resizing. Overrides the table option.\nNone\n\n\nfilterable\nbool | None\nWhether to enable column filtering. Overrides the table option.\nNone\n\n\nsearchable\nbool | None\nWhether to enable global table searching for this column. By default, global searching applies to all visible columns. Set this to False to exclude a visible column from searching, or True to include a hidden column in searching.\nNone\n\n\nfilter_method\nJsFunction | None\nCustom filter method to use for column filtering. A JS() function that takes an array of row objects, the column ID, and the filter value as arguments, and returns the filtered array of row objects.\nNone\n\n\nshow\nbool | None\nWhether to show the column.\nNone\n\n\ndefault_sort_order\nLiteral['asc', 'desc'] | None\nDefault sort order. Either “asc” for ascending order or “desc” for descending order. Overrides the table option.\nNone\n\n\nsort_na_last\nbool | None\nAlways sort missing values (e.g. None, nan, NAs) last?\nNone\n\n\nformat\nColFormat | ColFormatGroupBy | None\nColumn formatting options. A ColFormat() object to format all cells, or a ColFormatGroupBy() to format standard cells (“cell”) and aggregated cells (“aggregated”) separately.\nNone\n\n\ncell\nJsFunctionCell | CellRenderer | None\nCustom cell renderer. A Python function that takes a CellInfo() object, or a JS() function that takes a cell info object and table state object as arguments.\nNone\n\n\ngrouped\nJsFunctionCell | None\nCustom grouped cell renderer. A JS() function that takes a cell info object and table state object as arguments.\nNone\n\n\naggregated\nJsFunctionCell | None\nCustom aggregated cell renderer. A JS() function that takes a cell info object and table state object as arguments.\nNone\n\n\nheader\nJsFunctionCol | Callable[[HeaderCellInfo], HTML] | None\nCustom header renderer. A Python function that takes a HeaderCellInfo() object or a JS() function that takes a column object and table state object as arguments.\nNone\n\n\nfooter\nJsFunctionCol | Callable[[ColInfo], HTML] | None\nFooter content or render function. Render functions can be a Python function that takes a ColInfo() object, or a JS() function that takes a column object and table state object as arguments.\nNone\n\n\ndetails\nJsFunctionRow | Callable[[RowInfo], HTML] | None\nAdditional content to display when expanding a row. A Python function that takes a RowInfo() object, or a JS() function that takes a row info object and table state object as arguments.\nNone\n\n\nhtml\nbool | None\nWhether to render content as HTML. Raw HTML strings are escaped by default.\nNone\n\n\nna\nstr | None\nString to display for missing values (e.g. None, nan, NAs). By default, missing values are displayed as blank cells.\nNone\n\n\nrow_header\nbool | None\nWhether to mark up cells in this column as row headers. Set this to True to help users navigate the table using assistive technologies. When cells are marked up as row headers, assistive technologies will read them aloud while navigating through cells in the table. Cells in the row names column are automatically marked up as row headers.\nNone\n\n\nmin_width\nint | None\nMinimum width of the column in pixels. Defaults to 100.\nNone\n\n\nmax_width\nint | None\nMaximum width of the column in pixels.\nNone\n\n\nwidth\nint | None\nFixed width of the column in pixels. Overrides min_width and max_width.\nNone\n\n\nalign\nLiteral['left', 'right', 'center'] | None\nHorizontal alignment of content in the column. One of “left”, “right”, “center”. By default, all numbers are right-aligned, while all other content is left-aligned.\nNone\n\n\nv_align\nLiteral['top', 'center', 'bottom'] | None\nVertical alignment of content in data cells. One of “top” (the default), “center”, “bottom”.\nNone\n\n\nheader_v_align\nLiteral['top', 'center', 'bottom'] | None\nVertical alignment of content in header cells. One of “top” (the default), “center”, “bottom”.\nNone\n\n\nsticky\nLiteral['left', 'right'] | None\nMake the column sticky when scrolling horizontally. Either “left” or “right” to make the column stick to the left or right side. If a sticky column is in a column group, all columns in the group will automatically be made sticky, including the column group header.\nNone\n\n\nclass_\nlist[str] | Callable[[CellInfo], list[str]] | JsFunctionCell | None\nAdditional CSS classes to apply to cells. Multiple classes should be specied as a single string with a space separating each class. If a list is passed, the first entry sets the class for the first cell, and so on. Can also be a Python function that takes a CellInfo() object, or a JS() function that takes a row info object, column object, and table state object as arguments.\nNone\n\n\nstyle\nCssRules | Callable[[ColEl], dict[str, str]] | None\nInline styles to apply to cells. A named list or character string. Can also be a Python function that takes the cell value, or a JS() function that takes a row info object, column object, and table state object as arguments.\nNone\n\n\nheader_class\nlist[str] | None\nAdditional CSS classes to apply to the header.\nNone\n\n\nheader_style\nCssStyles | None\nInline styles to apply to the header. A named list or character string.\nNone\n\n\nfooter_class\nlist[str] | None\nAdditional CSS classes to apply to the footer.\nNone\n\n\nfooter_style\nCssRules | None\nInline styles to apply to the footer. A named list or character string.\nNone\n\n\nid\nstr | None\nThis is currently used internally, and should not be set by the user.\nNone"
  },
  {
    "objectID": "reference/Column.html#parameters",
    "href": "reference/Column.html#parameters",
    "title": "Column",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nname\nstr | None\nThe name to display in the header.\nNone\n\n\naggregate\nLiteral['mean', 'sum', 'max', 'min', 'median', 'count', 'unique', 'frequency'] | JsFunction | None\nAggregate function to use when rows are grouped. The name of a built-in aggregate function or a custom JS() aggregate function. Built-in aggregate functions are: “mean”, “sum”, “max”, “min”, “median”, “count”, “unique”, and “frequency”. To enable row grouping, use the group_by argument in Reactable().\nNone\n\n\nsortable\nbool | None\nWhether to enable sorting. Overrides the table option.\nNone\n\n\nresizable\nbool | None\nWhether to enable column resizing. Overrides the table option.\nNone\n\n\nfilterable\nbool | None\nWhether to enable column filtering. Overrides the table option.\nNone\n\n\nsearchable\nbool | None\nWhether to enable global table searching for this column. By default, global searching applies to all visible columns. Set this to False to exclude a visible column from searching, or True to include a hidden column in searching.\nNone\n\n\nfilter_method\nJsFunction | None\nCustom filter method to use for column filtering. A JS() function that takes an array of row objects, the column ID, and the filter value as arguments, and returns the filtered array of row objects.\nNone\n\n\nshow\nbool | None\nWhether to show the column.\nNone\n\n\ndefault_sort_order\nLiteral['asc', 'desc'] | None\nDefault sort order. Either “asc” for ascending order or “desc” for descending order. Overrides the table option.\nNone\n\n\nsort_na_last\nbool | None\nAlways sort missing values (e.g. None, nan, NAs) last?\nNone\n\n\nformat\nColFormat | ColFormatGroupBy | None\nColumn formatting options. A ColFormat() object to format all cells, or a ColFormatGroupBy() to format standard cells (“cell”) and aggregated cells (“aggregated”) separately.\nNone\n\n\ncell\nJsFunctionCell | CellRenderer | None\nCustom cell renderer. A Python function that takes a CellInfo() object, or a JS() function that takes a cell info object and table state object as arguments.\nNone\n\n\ngrouped\nJsFunctionCell | None\nCustom grouped cell renderer. A JS() function that takes a cell info object and table state object as arguments.\nNone\n\n\naggregated\nJsFunctionCell | None\nCustom aggregated cell renderer. A JS() function that takes a cell info object and table state object as arguments.\nNone\n\n\nheader\nJsFunctionCol | Callable[[HeaderCellInfo], HTML] | None\nCustom header renderer. A Python function that takes a HeaderCellInfo() object or a JS() function that takes a column object and table state object as arguments.\nNone\n\n\nfooter\nJsFunctionCol | Callable[[ColInfo], HTML] | None\nFooter content or render function. Render functions can be a Python function that takes a ColInfo() object, or a JS() function that takes a column object and table state object as arguments.\nNone\n\n\ndetails\nJsFunctionRow | Callable[[RowInfo], HTML] | None\nAdditional content to display when expanding a row. A Python function that takes a RowInfo() object, or a JS() function that takes a row info object and table state object as arguments.\nNone\n\n\nhtml\nbool | None\nWhether to render content as HTML. Raw HTML strings are escaped by default.\nNone\n\n\nna\nstr | None\nString to display for missing values (e.g. None, nan, NAs). By default, missing values are displayed as blank cells.\nNone\n\n\nrow_header\nbool | None\nWhether to mark up cells in this column as row headers. Set this to True to help users navigate the table using assistive technologies. When cells are marked up as row headers, assistive technologies will read them aloud while navigating through cells in the table. Cells in the row names column are automatically marked up as row headers.\nNone\n\n\nmin_width\nint | None\nMinimum width of the column in pixels. Defaults to 100.\nNone\n\n\nmax_width\nint | None\nMaximum width of the column in pixels.\nNone\n\n\nwidth\nint | None\nFixed width of the column in pixels. Overrides min_width and max_width.\nNone\n\n\nalign\nLiteral['left', 'right', 'center'] | None\nHorizontal alignment of content in the column. One of “left”, “right”, “center”. By default, all numbers are right-aligned, while all other content is left-aligned.\nNone\n\n\nv_align\nLiteral['top', 'center', 'bottom'] | None\nVertical alignment of content in data cells. One of “top” (the default), “center”, “bottom”.\nNone\n\n\nheader_v_align\nLiteral['top', 'center', 'bottom'] | None\nVertical alignment of content in header cells. One of “top” (the default), “center”, “bottom”.\nNone\n\n\nsticky\nLiteral['left', 'right'] | None\nMake the column sticky when scrolling horizontally. Either “left” or “right” to make the column stick to the left or right side. If a sticky column is in a column group, all columns in the group will automatically be made sticky, including the column group header.\nNone\n\n\nclass_\nlist[str] | Callable[[CellInfo], list[str]] | JsFunctionCell | None\nAdditional CSS classes to apply to cells. Multiple classes should be specied as a single string with a space separating each class. If a list is passed, the first entry sets the class for the first cell, and so on. Can also be a Python function that takes a CellInfo() object, or a JS() function that takes a row info object, column object, and table state object as arguments.\nNone\n\n\nstyle\nCssRules | Callable[[ColEl], dict[str, str]] | None\nInline styles to apply to cells. A named list or character string. Can also be a Python function that takes the cell value, or a JS() function that takes a row info object, column object, and table state object as arguments.\nNone\n\n\nheader_class\nlist[str] | None\nAdditional CSS classes to apply to the header.\nNone\n\n\nheader_style\nCssStyles | None\nInline styles to apply to the header. A named list or character string.\nNone\n\n\nfooter_class\nlist[str] | None\nAdditional CSS classes to apply to the footer.\nNone\n\n\nfooter_style\nCssRules | None\nInline styles to apply to the footer. A named list or character string.\nNone\n\n\nid\nstr | None\nThis is currently used internally, and should not be set by the user.\nNone"
  },
  {
    "objectID": "reference/ColFormatGroupBy.html",
    "href": "reference/ColFormatGroupBy.html",
    "title": "ColFormatGroupBy",
    "section": "",
    "text": "ColFormatGroupBy(self, cell=None, aggregated=None)\nSpecify formatters for standard and aggregate cells.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncell\nColFormat | None\nColumn formatting options for standard cells.\nNone\n\n\naggregated\nColFormat | None\nColumn formatting options for aggregated cells.\nNone"
  },
  {
    "objectID": "reference/ColFormatGroupBy.html#parameters",
    "href": "reference/ColFormatGroupBy.html#parameters",
    "title": "ColFormatGroupBy",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ncell\nColFormat | None\nColumn formatting options for standard cells.\nNone\n\n\naggregated\nColFormat | None\nColumn formatting options for aggregated cells.\nNone"
  },
  {
    "objectID": "reference/HeaderCellInfo.html",
    "href": "reference/HeaderCellInfo.html",
    "title": "HeaderCellInfo",
    "section": "",
    "text": "HeaderCellInfo\nHeaderCellInfo(self, value, name=None)\nHeader cell data for custom rendering of column header (column labels)."
  },
  {
    "objectID": "reference/CellInfo.html",
    "href": "reference/CellInfo.html",
    "title": "CellInfo",
    "section": "",
    "text": "CellInfo\nCellInfo(self, value, row_index, column_name)\nCell data for custom rendering of cells, class_, and style."
  },
  {
    "objectID": "demos/index.html#demos",
    "href": "demos/index.html#demos",
    "title": "reactable-py",
    "section": "Demos",
    "text": "Demos\n\n\nPyPI downloads\n\n\n\n\nTwitter followers\n\n\n\n\nGreat Tables - coffee table\n\n\n\n\nGreat Tables - solar angles"
  },
  {
    "objectID": "demos/index.html#cookbook-examples",
    "href": "demos/index.html#cookbook-examples",
    "title": "reactable-py",
    "section": "Cookbook examples",
    "text": "Cookbook examples\n\n\nInsert links\n\n\n\n\n\n\n\n\n\nFormat colors\n\n\n\n\n\n\n\n\n\nFormat colors (2)\n\n\n\n\n\n\n\n\n\nFormat changes\n\n\n\n\n\n\n\n\n\nFormat tags\n\n\n\n\n\n\n\n\n\n\n\n\n\nFormat badge\n\n\n\n\n\n\n\n\n\nBar charts\n\n\n\n\n\n\n\n\n\nEmbed images\n\n\n\n\n\n\n\n\n\nRating stars\n\n\n\n\n\n\n\n\n\nCombine cols\n\n\n\n\n\n\n\n\n\nTotal rows\n\n\n\n\n\n\n\n\n\nNested tables\n\n\n\n\n\n\n\n\n\nUnits on first row"
  },
  {
    "objectID": "demos/twitter-followers.html",
    "href": "demos/twitter-followers.html",
    "title": "Twitter Followers",
    "section": "",
    "text": "Code\nfrom IPython.display import display, HTML\n\nhtml = \"\"\"\n&lt;link href = \"https://fonts.googleapis.com/css?family=Karla:400,700|Fira+Mono&display=fallback\" rel = \"stylesheet\" /&gt;\n\n&lt;style&gt;\n.twitter-followers {\n  margin: 0 auto;\n  width: 575px;\n  font-family: Karla, \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n}\n\n.followers-header {\n  margin: 1.125rem 0;\n  font-size: 1rem;\n}\n\n.followers-title {\n  font-size: 1.25rem;\n  font-weight: 600;\n}\n\n.followers-tbl {\n  font-size: 0.875rem;\n  line-height: 1.125rem;\n}\n\n.followers-tbl a {\n  color: inherit;\n  text-decoration: none;\n}\n\n.followers-tbl a:hover,\n.followers-tbl a:focus {\n  text-decoration: underline;\n  text-decoration-thickness: max(1px, 0.0625rem);\n}\n\n.header {\n  border-bottom: 2px solid #555;\n  font-size: 0.8125rem;\n  font-weight: 400;\n  text-transform: uppercase;\n}\n\n.header:hover {\n  background-color: #eee;\n}\n\n.bar-cell {\n  display: flex;\n  align-items: center;\n}\n\n.number {\n  font-family: \"Fira Mono\", Consolas, Monaco, monospace;\n  font-size: 0.84375rem;\n  white-space: pre;\n}\n\n.bar-chart {\n  flex-grow: 1;\n  margin-left: 0.375rem;\n  height: 0.875rem;\n}\n\n.bar {\n  height: 100%;\n}\n&lt;/style&gt;\n\n\"\"\"\n\ndisplay(HTML(html))\n\n\n\n\n\n\n\n\n\n\n\nCode\nfrom reactable import embed_css\n\nembed_css()\n\n\n\n    \n    \n    \n    \n    \n\n\n\n\nCode\nfrom reactable import Reactable, embed_css\nfrom reactable.tags import to_widget\nfrom reactable.models import Column, CellInfo, JS\nfrom htmltools import tags\n\nimport polars as pl\n\n\ndata = pl.read_csv(\"twitter_followers.csv\")\n\n\ndef f_followers(ci: CellInfo):\n    width = f\"{ci.value * 100 / data['followers'].max()}%\"\n    val = f\"{ci.value:,}\".rjust(9)\n    bar = tags.div(\n        tags.div(\n            class_=\"bar\",\n            style=f\"width: {width}; background-color: #3fc1c9\",\n        ),\n        class_=\"bar-chart\",\n        style=\"margin-right: 0.375rem\",\n    )\n    return tags.div(\n        tags.span(class_=\"number\", content=val),\n        bar,\n        class_=\"bar-cell\",\n    )\n\n\njs_exclusive_percent = JS(\n    \"\"\"\n    function(cellInfo) {\n      // Format as percentage\n      const pct = (cellInfo.value * 100).toFixed(1) + \"%\"\n      // Pad single-digit numbers\n      let value = pct.padStart(5)\n      // Show % on first row only\n      if (cellInfo.viewIndex &gt; 0) {\n        value = value.replace(\"%\", \" \")\n      }\n      // Render bar chart\n      return `\n        &lt;div class=\"bar-cell\"&gt;\n          &lt;span class=\"number\"&gt;${value}&lt;/span&gt;\n          &lt;div class=\"bar-chart\" style=\"background-color: #e1e1e1\"&gt;\n            &lt;div class=\"bar\" style=\"width: ${pct}; background-color: #fc5185\"&gt;&lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      `\n    }\"\"\"\n)\n\ntbl = Reactable(\n    data,\n    pagination=False,\n    default_sorted=[\"exclusive_followers_pct\"],\n    default_col_def=Column(header_class=\"header\", align=\"left\"),\n    columns=dict(\n        account=Column(\n            cell=lambda ci: (\n                tags.a(\n                    f\"@{ci.value}\",\n                    href=f\"https://twitter.com/{ci.value}\",\n                    target=\"_blank\",\n                )\n            ),\n            width=150,\n        ),\n        followers=Column(default_sort_order=\"desc\", cell=f_followers),\n        exclusive_followers_pct=Column(\n            name=\"Exclusive Followers\",\n            default_sort_order=\"desc\",\n            cell=js_exclusive_percent,\n            html=True,\n        ),\n    ),\n    compact=True,\n    class_=\"followers-tbl\",\n    static=True,\n)\n\nto_widget(\n    tags.div(\n        tags.div(\n            tags.h2(\"Candidates whose followers are loyal only to them\", class_=\"followers-title\"),\n            \"Share of each 2020 candidate's followers who don't follow any other candidates\",\n            class_=\"followers-header\",\n        ),\n        tbl,\n        class_=\"twitter-followers\",\n    )\n)\n\n\n\n\n\nSource: FiveThirtyEight\nRaw data: twitter_followers.csv\nHow it was made: Building the Twitter Followers Demo\n\nSource Code\n\nfrom reactable import Reactable, embed_css\nfrom reactable.tags import to_widget\nfrom reactable.models import Column, CellInfo, JS\nfrom htmltools import tags\n\nimport polars as pl\n\n\ndata = pl.read_csv(\"twitter_followers.csv\")\n\n\ndef f_followers(ci: CellInfo):\n    width = f\"{ci.value * 100 / data['followers'].max()}%\"\n    val = f\"{ci.value:,}\".rjust(9)\n    bar = tags.div(\n        tags.div(\n            class_=\"bar\",\n            style=f\"width: {width}; background-color: #3fc1c9\",\n        ),\n        class_=\"bar-chart\",\n        style=\"margin-right: 0.375rem\",\n    )\n    return tags.div(\n        tags.span(class_=\"number\", content=val),\n        bar,\n        class_=\"bar-cell\",\n    )\n\n\njs_exclusive_percent = JS(\n    \"\"\"\n    function(cellInfo) {\n      // Format as percentage\n      const pct = (cellInfo.value * 100).toFixed(1) + \"%\"\n      // Pad single-digit numbers\n      let value = pct.padStart(5)\n      // Show % on first row only\n      if (cellInfo.viewIndex &gt; 0) {\n        value = value.replace(\"%\", \" \")\n      }\n      // Render bar chart\n      return `\n        &lt;div class=\"bar-cell\"&gt;\n          &lt;span class=\"number\"&gt;${value}&lt;/span&gt;\n          &lt;div class=\"bar-chart\" style=\"background-color: #e1e1e1\"&gt;\n            &lt;div class=\"bar\" style=\"width: ${pct}; background-color: #fc5185\"&gt;&lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      `\n    }\"\"\"\n)\n\ntbl = Reactable(\n    data,\n    pagination=False,\n    default_sorted=[\"exclusive_followers_pct\"],\n    default_col_def=Column(header_class=\"header\", align=\"left\"),\n    columns=dict(\n        account=Column(\n            cell=lambda ci: (\n                tags.a(\n                    f\"@{ci.value}\",\n                    href=f\"https://twitter.com/{ci.value}\",\n                    target=\"_blank\",\n                )\n            ),\n            width=150,\n        ),\n        followers=Column(default_sort_order=\"desc\", cell=f_followers),\n        exclusive_followers_pct=Column(\n            name=\"Exclusive Followers\",\n            default_sort_order=\"desc\",\n            cell=js_exclusive_percent,\n            html=True,\n        ),\n    ),\n    compact=True,\n    class_=\"followers-tbl\",\n    static=True,\n)\n\nto_widget(\n    tags.div(\n        tags.div(\n            tags.h2(\"Candidates whose followers are loyal only to them\", class_=\"followers-title\"),\n            \"Share of each 2020 candidate's followers who don't follow any other candidates\",\n            class_=\"followers-header\",\n        ),\n        tbl,\n        class_=\"twitter-followers\",\n    )\n)\n\n&lt;link href = \"https://fonts.googleapis.com/css?family=Karla:400,700|Fira+Mono&display=fallback\" rel = \"stylesheet\" /&gt;\n\n&lt;style&gt;\n.twitter-followers {\n  margin: 0 auto;\n  width: 575px;\n  font-family: Karla, \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n}\n\n.followers-header {\n  margin: 1.125rem 0;\n  font-size: 1rem;\n}\n\n.followers-title {\n  font-size: 1.25rem;\n  font-weight: 600;\n}\n\n.followers-tbl {\n  font-size: 0.875rem;\n  line-height: 1.125rem;\n}\n\n.followers-tbl a {\n  color: inherit;\n  text-decoration: none;\n}\n\n.followers-tbl a:hover,\n.followers-tbl a:focus {\n  text-decoration: underline;\n  text-decoration-thickness: max(1px, 0.0625rem);\n}\n\n.header {\n  border-bottom: 2px solid #555;\n  font-size: 0.8125rem;\n  font-weight: 400;\n  text-transform: uppercase;\n}\n\n.header:hover {\n  background-color: #eee;\n}\n\n.bar-cell {\n  display: flex;\n  align-items: center;\n}\n\n.number {\n  font-family: \"Fira Mono\", Consolas, Monaco, monospace;\n  font-size: 0.84375rem;\n  white-space: pre;\n}\n\n.bar-chart {\n  flex-grow: 1;\n  margin-left: 0.375rem;\n  height: 0.875rem;\n}\n\n.bar {\n  height: 100%;\n}\n&lt;/style&gt;"
  },
  {
    "objectID": "demos/great-tables.html",
    "href": "demos/great-tables.html",
    "title": "Great Tables Gallery",
    "section": "",
    "text": "Show the Code\nfrom reactable import embed_css, render\n\nembed_css()\n\n\n\n    \n    \n    \n    \n    \n\n\n\n\n\n\n\nShow the Code\nimport polars as pl\nfrom great_tables import GT, md, html\nfrom great_tables.data import islands\nfrom reactable import render\n\n\nislands_mini = pl.from_pandas(islands).sort(\"size\", descending=True).head(10)\n\ngt = (\n    GT(islands_mini)\n    .tab_header(title=\"Large Landmasses of the World\", subtitle=\"The top ten largest are presented\")\n    .tab_stub(rowname_col=\"name\")\n    .tab_source_note(source_note=\"Source: The World Almanac and Book of Facts, 1975, page 406.\")\n    .tab_source_note(\n        source_note=md(\"Reference: McNeil, D. R. (1977) *Interactive Data Analysis*. Wiley.\")\n    )\n    .tab_stubhead(label=\"landmass\")\n    .fmt_integer(columns=\"size\")\n)\n\nrender(gt)\n\n\n\n\n\n\n\n\n\nShow the Code\nimport polars as pl\n\nfrom great_tables import GT, html\nfrom great_tables.data import airquality\n\nairquality_mini = airquality.head(10).assign(Year=1973)\n\ngt = (\n    GT(pl.from_pandas(airquality_mini))\n    .tab_header(\n        title=\"New York Air Quality Measurements\",\n        subtitle=\"Daily measurements in New York City (May 1-10, 1973)\",\n    )\n    .tab_spanner(label=\"Time\", columns=[\"Year\", \"Month\", \"Day\"])\n    .tab_spanner(label=\"Measurement\", columns=[\"Ozone\", \"Solar_R\", \"Wind\", \"Temp\"])\n    .cols_move_to_start(columns=[\"Year\", \"Month\", \"Day\"])\n    .cols_label(\n        Ozone=html(\"Ozone,&lt;br&gt;ppbV\"),\n        Solar_R=html(\"Solar R.,&lt;br&gt;cal/m&lt;sup&gt;2&lt;/sup&gt;\"),\n        Wind=html(\"Wind,&lt;br&gt;mph\"),\n        Temp=html(\"Temp,&lt;br&gt;&deg;F\"),\n    )\n)\n\nrender(gt)\n\n\n\n\n\n\n\n\n\nShow the Code\nfrom great_tables import GT\nfrom great_tables.data import countrypops\nimport polars as pl\nimport polars.selectors as cs\n\n# Get vectors of 2-letter country codes for each region of Oceania\noceania = {\n    \"Australasia\": [\"AU\", \"NZ\"],\n    \"Melanesia\": [\"NC\", \"PG\", \"SB\", \"VU\"],\n    \"Micronesia\": [\"FM\", \"GU\", \"KI\", \"MH\", \"MP\", \"NR\", \"PW\"],\n    \"Polynesia\": [\"PF\", \"WS\", \"TO\", \"TV\"],\n}\n\n# Create a dictionary mapping country to region (e.g. AU -&gt; Australasia)\ncountry_to_region = {\n    country: region for region, countries in oceania.items() for country in countries\n}\n\nwide_pops = (\n    pl.from_pandas(countrypops)\n    .filter(\n        pl.col(\"country_code_2\").is_in(list(country_to_region))\n        & pl.col(\"year\").is_in([2000, 2010, 2020])\n    )\n    .with_columns(pl.col(\"country_code_2\").replace(country_to_region).alias(\"region\"))\n    .filter(pl.col(\"region\").is_in([\"Australasia\", \"Melanesia\"]))\n    .pivot(index=[\"country_name\", \"region\"], on=\"year\", values=\"population\")\n    .sort(\"2020\", descending=True)\n)\n\ngt = (\n    GT(wide_pops)\n    .tab_header(title=\"Populations of Oceania's Countries in 2000, 2010, and 2020\")\n    .tab_spanner(label=\"Total Population\", columns=cs.all())\n    .tab_stub(rowname_col=\"country_name\", groupname_col=\"region\")\n    .fmt_integer()\n)\n\nrender(gt)\n\n\n\n\n\n\n\n\n\nShow the Code\nfrom great_tables import GT, html\nfrom great_tables.data import towny\n\ntowny_mini = (\n    towny[[\"name\", \"website\", \"density_2021\", \"land_area_km2\", \"latitude\", \"longitude\"]]\n    .sort_values(\"density_2021\", ascending=False)\n    .head(10)\n)\n\ntowny_mini[\"url_name\"] = [\"[\"] + towny_mini[\"name\"] + [\"]\"] + [\"(\"] + towny_mini[\"website\"] + [\")\"]\n\ntowny_mini[\"location\"] = (\n    [\"[map](http://maps.google.com/?ie=UTF8&hq=&ll=\"]\n    + towny_mini[\"latitude\"].astype(str)\n    + [\",\"]\n    + towny_mini[\"longitude\"].astype(str)\n    + [\"&z=13)\"]\n)\n\npl_towny = pl.from_pandas(towny_mini[[\"url_name\", \"location\", \"land_area_km2\", \"density_2021\"]])\n\ngt = (\n    GT(\n        pl_towny,\n        rowname_col=\"url_name\",\n    )\n    .tab_header(\n        title=\"The Municipalities of Ontario\",\n        subtitle=\"The top 10 highest population density in 2021\",\n    )\n    .tab_stubhead(label=\"Municipality\")\n    .fmt_markdown(columns=[\"url_name\", \"location\"])\n    .fmt_number(columns=[\"land_area_km2\", \"density_2021\"], decimals=1)\n    .cols_label(\n        land_area_km2=html(\"land area, &lt;br&gt;km&lt;sup&gt;2&lt;/sup&gt;\"),\n        density_2021=html(\"density, &lt;br&gt;people/km&lt;sup&gt;2&lt;/sup&gt;\"),\n    )\n)\n\nrender(gt)\n\n\n\n\n\n\n\n\n\nShow the Code\nfrom great_tables import GT, html\nfrom great_tables.data import sza\nimport polars as pl\nimport polars.selectors as cs\n\nsza_pivot = (\n    pl.from_pandas(sza)\n    .filter((pl.col(\"latitude\") == \"20\") & (pl.col(\"tst\") &lt;= \"1200\"))\n    .select(pl.col(\"*\").exclude(\"latitude\"))\n    .drop_nulls()\n    .pivot(values=\"sza\", index=\"month\", on=\"tst\", sort_columns=True)\n)\n\ngt = (\n    GT(sza_pivot, rowname_col=\"month\")\n    .data_color(\n        domain=[90, 0],\n        palette=[\"rebeccapurple\", \"white\", \"orange\"],\n        na_color=\"white\",\n    )\n    .tab_header(\n        title=\"Solar Zenith Angles from 05:30 to 12:00\",\n        subtitle=html(\"Average monthly values at latitude of 20&deg;N.\"),\n    )\n    .cols_width({k: 50 for k in sza_pivot.columns})\n    .sub_missing(missing_text=\"\")\n)\n\nrender(gt)\n\n\n\n\n\n\n\n\n\nShow the Code\nimport polars as pl\nimport polars.selectors as cs\nfrom great_tables import GT, md\n\n\ndef create_bar(prop_fill: float, max_width: int, height: int) -&gt; str:\n    \"\"\"Create divs to represent prop_fill as a bar.\"\"\"\n    width = round(max_width * prop_fill, 2)\n    px_width = f\"{width}px\"\n    return f\"\"\"\\\n    &lt;div style=\"width: {max_width}px; background-color: lightgrey;\"&gt;\\\n        &lt;div style=\"height:{height}px;width:{px_width};background-color:green;\"&gt;&lt;/div&gt;\\\n    &lt;/div&gt;\\\n    \"\"\"\n\n\ndf = pl.read_csv(\"./sports-earnings/sports_earnings.csv\")\n\nres = (\n    df.with_columns(\n        (pl.col(\"Off-the-Field Earnings\") / pl.col(\"Total Earnings\")).alias(\"raw_perc\"),\n        (\"./sports-earnings/\" + pl.col(\"Sport\").str.to_lowercase() + \".png\").alias(\"icon\"),\n    )\n    .head(9)\n    .with_columns(\n        pl.col(\"raw_perc\")\n          .map_elements(lambda x: create_bar(x, max_width=75, height=20))\n          .alias(\"Off-the-Field Earnings Perc\")\n    )\n    .select(\"Rank\", \"Name\", \"icon\", \"Sport\", \"Total Earnings\", \"Off-the-Field Earnings\", \"Off-the-Field Earnings Perc\")\n)\n\ngt = (\n    GT(res, rowname_col=\"Rank\")\n    .tab_header(\"Highest Paid Athletes in 2023\")\n    .tab_spanner(\"Earnings\", cs.contains(\"Earnings\"))\n    #.fmt_number(cs.starts_with(\"Total\"), scale_by = 1/1_000_000, decimals=1)\n    .cols_label(**{\n        \"Total Earnings\": \"Total $M\",\n        \"Off-the-Field Earnings\": \"Off field $M\",\n        \"Off-the-Field Earnings Perc\": \"Off field %\"\n    })\n    .fmt_number([\"Total Earnings\", \"Off-the-Field Earnings\"], scale_by = 1/1_000_000, decimals=1)\n    .fmt_image(\"icon\", path=\"./\")\n    .tab_source_note(\n        md(\n            '&lt;br&gt;&lt;div style=\"text-align: center;\"&gt;'\n            \"Original table: [@LisaHornung_](https://twitter.com/LisaHornung_/status/1752981867769266231)\"\n            \" | Sports icons: [Firza Alamsyah](https://thenounproject.com/browse/collection-icon/sports-96427)\"\n            \" | Data: Forbes\"\n            \"&lt;/div&gt;\"\n            \"&lt;br&gt;\"\n        )\n    )\n)\nrender(gt)\n\n\n/tmp/ipykernel_2049/3327212400.py:25: MapWithoutReturnDtypeWarning:\n\nCalling `map_elements` without specifying `return_dtype` can lead to unpredictable results. Specify `return_dtype` to silence this warning.\n\n\n\n\n\n\n\n\n\n\nShow the Code\nimport polars as pl\nimport polars.selectors as cs\nfrom great_tables import GT, loc, style\n\ncoffee_sales = pl.DataFrame.deserialize(\"coffee-sales/coffee-sales.json\", format=\"json\")\n\nsel_rev = cs.starts_with(\"revenue\")\nsel_prof = cs.starts_with(\"profit\")\n\n\ncoffee_table = (\n    GT(coffee_sales)\n    .tab_header(\"Sales of Coffee Equipment\")\n    .tab_spanner(label=\"Revenue\", columns=sel_rev)\n    .tab_spanner(label=\"Profit\", columns=sel_prof)\n    .cols_label(\n        revenue_dollars=\"Amount\",\n        profit_dollars=\"Amount\",\n        revenue_pct=\"Percent\",\n        profit_pct=\"Percent\",\n        monthly_sales=\"Monthly Sales\",\n        icon=\"\",\n        product=\"Product\",\n    )\n    # formatting ----\n    .fmt_number(\n        columns=cs.ends_with(\"dollars\"),\n        compact=True,\n        pattern=\"${x}\",\n        n_sigfig=3,\n    )\n    .fmt_percent(columns=cs.ends_with(\"pct\"), decimals=0)\n    # style ----\n    .tab_style(\n        style=style.fill(color=\"aliceblue\"),\n        locations=loc.body(columns=sel_rev),\n    )\n    .tab_style(\n        style=style.fill(color=\"papayawhip\"),\n        locations=loc.body(columns=sel_prof),\n    )\n    .tab_style(\n        style=style.text(weight=\"bold\"),\n        locations=loc.body(rows=pl.col(\"product\") == \"Total\"),\n    )\n    .fmt_nanoplot(\"monthly_sales\", plot_type=\"bar\")\n    .fmt_image(\"icon\", path=\"coffee-sales\")\n    .sub_missing(missing_text=\"\")\n)\n\n# coffee_table.save(\"data/coffee-table.png\",  scale=2)\nrender(coffee_table)"
  },
  {
    "objectID": "blog/introduction/index.html",
    "href": "blog/introduction/index.html",
    "title": "reactable-py: interactive tables in reports and notebooks",
    "section": "",
    "text": "I’m excited to share the Python release of reactable—a library for adding interactive tables to your reports and notebooks! reactable is a port of the R library of the same name.\nInteractive tables in reports provide some neat features:\nFor example, here is a table of the most downloaded packages on PyPI:\nNotice that if you click on a row, it expands to show the details of the package. Expandable rows are great for providing a dense summary table, while allowing people to drill deeper into pieces that interest them.\n(The code for this table is on github in this demo notebook or this qmd.)"
  },
  {
    "objectID": "blog/introduction/index.html#interactive-polars-and-pandas-dataframes",
    "href": "blog/introduction/index.html#interactive-polars-and-pandas-dataframes",
    "title": "reactable-py: interactive tables in reports and notebooks",
    "section": "Interactive Polars and Pandas DataFrames",
    "text": "Interactive Polars and Pandas DataFrames\nreactable works with both Pandas and Polars DataFrames. There are a bunch of datasets included, so you can quickly try it out.\nFor example, here’s a table that allows searching and filtering some car data:\n\nfrom reactable import Reactable, embed_css\nfrom reactable.data import cars_93\n\n# Note that currently this function is required\n# to put css into notebooks.\nembed_css()\n\n\nReactable(\n    cars_93[[\"manufacturer\", \"model\", \"type\", \"price\"]],\n    default_page_size=5,\n    searchable=True,\n    filterable=True,\n)\n\n\n    \n    \n    \n    \n    \n\n\n\n\n\nNote 2 important pieces:\n\nThere are boxes above each column for filtering, and a global search bar.\nThe table is paginated, with 5 rows per page.\n\nMoreover, cars_93 is actually a lightweight reactable implementation of a “DataFrame” called SimpleFrame. Use methods like cars_93.to_polars() or .to_pandas() to convert to either library. The use of SimpleFrame allows us to provide demo data, without requiring users to install Pandas and Polars.\nThe Code basics page builds on this example to show the basics of reactable-py."
  },
  {
    "objectID": "blog/introduction/index.html#expandable-rows",
    "href": "blog/introduction/index.html#expandable-rows",
    "title": "reactable-py: interactive tables in reports and notebooks",
    "section": "Expandable rows",
    "text": "Expandable rows\nHere’s a more advanced example, where each row of this palmer penguins data expands into a nested reactable table.\n\nfrom reactable import Reactable, embed_css\nfrom reactable.data import penguins\nfrom htmltools import HTML, div\n\nembed_css()\n\npl_penguins = penguins.to_polars()\n\n# Create a dictionary of all the nested tables ----\nsub_tables = {\n    g: div(Reactable(df, outlined=True).to_widget(), style=\"padding: 1rem\")\n    for g, df in pl_penguins.group_by(\"species\", \"island\")\n}\n\n# Get summary rows for displayed table ----\ndf_uniq = pl_penguins.select([\"species\", \"island\"]).unique()\n\nReactable(\n    df_uniq,\n    # Use details argument to expand rows into nested tables ----\n    details=lambda row_info: list(sub_tables.values())[row_info.row_index],\n)\n\n\n    \n    \n    \n    \n    \n\n\n\n\n\nNotice that if you click a summary row, it expands to show all the data belonging to that group in the data.\nSee more in the Expandable details page of the user guide."
  },
  {
    "objectID": "blog/introduction/index.html#custom-javascript",
    "href": "blog/introduction/index.html#custom-javascript",
    "title": "reactable-py: interactive tables in reports and notebooks",
    "section": "Custom Javascript",
    "text": "Custom Javascript\nreactable-py supports custom javascript for formatting, styling, and responding to events (like row selection). Below is an example of styling a column of values with javascript.\n\nfrom reactable import Reactable, JS, embed_css\nfrom reactable.data import sleep\n\nembed_css()\n\n# Javascript for styling values ----\njs_style = JS(\n    \"\"\"function(rowInfo) {\n      const value = rowInfo.values['extra']\n      let color\n      if (value &gt; 0) {\n        color = '#008000'\n      } else {\n        color = '#e00000'\n      }\n\n      return { color: color, fontWeight: 'bold' }\n    }\"\"\"\n)\n\n# Create table ----\nReactable(\n    sleep[:6, :],\n    columns=[\n        Column(\n            id=\"extra\",\n            style=js_style,\n        )\n    ],\n)\n\n\n    \n    \n    \n    \n    \n\n\n\n\n\nThe JS() function wraps a string, in order to tell reactable that some javascript is being used. See the javascript style, and javascript controls pages for more examples.\nNote that you can also use Python to style, which is often easier (but less exciting)."
  },
  {
    "objectID": "blog/introduction/index.html#common-use-cases",
    "href": "blog/introduction/index.html#common-use-cases",
    "title": "reactable-py: interactive tables in reports and notebooks",
    "section": "Common use cases",
    "text": "Common use cases\nFor more examples and use cases, check out the reactable-py Examples page or Cookbook.\nFor more inspiration see the tons of demo tables in the reactable R docs or this incredible Amtrak train table by Josh Fangmeier."
  },
  {
    "objectID": "blog/introduction/index.html#in-conclusion",
    "href": "blog/introduction/index.html#in-conclusion",
    "title": "reactable-py: interactive tables in reports and notebooks",
    "section": "In conclusion",
    "text": "In conclusion\nreactable-py is a port of the reactable R package to Python. It enables you to create beautiful, interactive tables for reports, dashboards, and more. Expand rows, sort columns, or extend all kinds of pieces with javascript! You can install reactable-py by using pip install reactable.\nA big motivation for porting reactable to Python was to be able to render Great Tables interactively, so keep an eye out for that in the near future!\nTo learn more, see the reactable-py get started page or the Code basics page."
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Reactable Blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nNov 4, 2024\n\n\nreactable-py: interactive tables in reports and notebooks\n\n\nMichael Chow\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "demos/cookbook/index.html",
    "href": "demos/cookbook/index.html",
    "title": "Cookbook",
    "section": "",
    "text": "from reactable import embed_css\n\nembed_css()"
  },
  {
    "objectID": "demos/cookbook/index.html#insert-links",
    "href": "demos/cookbook/index.html#insert-links",
    "title": "Cookbook",
    "section": "Insert links",
    "text": "Insert links\n\nimport polars as pl\nimport htmltools as ht\n\nfrom reactable import Reactable, Column\n\ndata = pl.DataFrame(\n    {\n        \"Address\": [\"https://google.com\", \"https://yahoo.com\", \"https://duckduckgo.com\"],\n        \"Site\": [\"Google\", \"Yahoo\", \"DuckDuckGo\"],\n    }\n)\n\nReactable(\n    data,\n    columns={\n        \"Address\": Column(\n            cell=lambda info: ht.a(info.value, href=info.value, target=\"_blank\"),\n        ),\n        \"Site\": Column(\n            html=True,\n            cell=lambda info: f'&lt;a href=\"{info.value}\" target=\"_blank\"&gt;{info.value}&lt;/a&gt;',\n        ),\n    },\n)"
  },
  {
    "objectID": "demos/cookbook/index.html#format-color-scales",
    "href": "demos/cookbook/index.html#format-color-scales",
    "title": "Cookbook",
    "section": "Format color scales",
    "text": "Format color scales\n\nSingle column\n\nfrom reactable import Reactable, Column, CellInfo\nfrom reactable.data import cars_93\n\nfrom mizani.palettes import gradient_n_pal\n\n\ndata = cars_93[[\"manufacturer\", \"model\", \"price\"]]\n\npal = gradient_n_pal([\"#ffe4cc\", \"#ff9500\"])\n\n\ndef fmt_fill(ci: CellInfo):\n    val_range = max(data[\"price\"]) - min(data[\"price\"])\n    normalized = (ci.value - min(data[\"price\"])) / val_range\n    return {\"background\": pal(normalized)}\n\n\nReactable(\n    data,\n    columns={\"price\": Column(style=fmt_fill)},\n    default_page_size=5,\n)\n\n\n\n\n\n\nGrid\n\nfrom reactable import Reactable, Column, ColFormat, CellInfo\nfrom reactable.data import nottem\n\nfrom mizani.palettes import gradient_n_pal\n\npal = gradient_n_pal([\"#7fb7d7\", \"#ffffbf\", \"#fc8d59\"])\n\n# flatten out monthly columns into a single list\n# this lets us calculate the overall min and max\nflat_vals = sum(nottem[:, 1:].to_dict().values(), [])\n\n\ndef fmt_fill(ci: CellInfo):\n    if not isinstance(ci.value, float):\n        return\n\n    val_range = max(flat_vals) - min(flat_vals)\n    normalized = (ci.value - min(flat_vals)) / val_range\n    color = pal(normalized)\n\n    return {\"background\": color}\n\n\nReactable(\n    nottem,\n    default_col_def=Column(\n        style=fmt_fill,\n        format=ColFormat(digits=1),\n        min_width=50,\n    ),\n    # TODO: make year rowname\n    columns={\n        \"year\": Column(\n            format=ColFormat(digits=0),\n            row_header=True,\n        ),\n    },\n    bordered=True,\n    default_page_size=5,\n)"
  },
  {
    "objectID": "demos/cookbook/index.html#format-changes",
    "href": "demos/cookbook/index.html#format-changes",
    "title": "Cookbook",
    "section": "Format changes",
    "text": "Format changes\n\nimport polars as pl\nfrom reactable import Reactable, Column, CellInfo\n\ndata = pl.DataFrame(\n    {\n        \"Symbol\": [\"GOOG\", \"FB\", \"AMZN\", \"NFLX\", \"TSLA\"],\n        \"Price\": [1265.13, 187.89, 1761.33, 276.82, 328.13],\n        \"Change\": [4.14, 1.51, -19.45, 5.32, -12.45],\n    }\n)\n\nReactable(\n    data,\n    columns={\n        \"Change\": Column(\n            # TODO: we should stringify, so people can\n            # return ci.value directly\n            cell=lambda ci: f\"+{ci.value}\" if ci.value &gt;= 0 else str(ci.value),\n            style=lambda ci: {\n                \"font-weight\": 600,\n                \"color\": \"#008000\" if ci.value &gt; 0 else \"#e00000\",\n            },\n        )\n    },\n)"
  },
  {
    "objectID": "demos/cookbook/index.html#format-tags-and-badges",
    "href": "demos/cookbook/index.html#format-tags-and-badges",
    "title": "Cookbook",
    "section": "Format tags and badges",
    "text": "Format tags and badges\n\nimport polars as pl\nfrom reactable import Reactable, Column, CellInfo\n\norders = pl.DataFrame(\n    {\n        \"Order\": [2300, 2301, 2302, 2303, 2304],\n        \"Created\": [\"2019-04-01\", \"2019-04-02\", \"2019-04-03\", \"2019-04-04\", \"2019-04-05\"],\n        # \"Customer\": [\"Degas\", \"Cezanne\", \"Monet\", \"Manet\", \"Renoir\"],\n        \"Status\": [\"Pending\", \"Paid\", \"Canceled\", \"Pending\", \"Paid\"],\n    }\n)\n\ntbl = Reactable(\n    orders,\n    columns={\n        \"Status\": Column(\n            cell=lambda ci: f'&lt;span class=\"tag status-{ci.value.lower()}\"&gt;{ci.value}&lt;/span&gt;',\n            html=True,\n        )\n    },\n)\n\n\nfrom IPython.display import display, HTML\n\ndisplay(\n    HTML(\n        \"\"\"\n&lt;style&gt;\n.tag {\n  display: inline-block;\n  padding: 0.125rem 0.75rem;\n  border-radius: 15px;\n  font-weight: 600;\n  font-size: 0.75rem;\n}\n\n.status-paid {\n  background: hsl(116, 60%, 90%);\n  color: hsl(116, 30%, 25%);\n}\n\n.status-pending {\n  background: hsl(230, 70%, 90%);\n  color: hsl(230, 45%, 30%);\n}\n\n.status-canceled {\n  background: hsl(350, 70%, 90%);\n  color: hsl(350, 45%, 30%);\n}\n&lt;/style&gt;\n\"\"\"\n    )\n)\n\ntbl\n\n\n\n\n\n\n\n\n\nimport htmltools\n\n\ndef status_badge(color=\"#aaa\", width=\"0.55rem\", height=None):\n    height = height or width\n    return htmltools.span(\n        style=(\n            \"display: inline-block;\"\n            \"margin-right: 0.5rem;\"\n            f\"width: {width};\"\n            f\"height: {height};\"\n            f\"background-color: {color};\"\n            \"border-radius: 50%\"\n        )\n    )\n\n\nstatus_hsl = {\n    \"Paid\": \"hsl(214, 45%, 50%)\",\n    \"Pending\": \"hsl(30, 97%, 70%)\",\n    \"Canceled\": \"hsl(3, 69%, 50%)\",\n}\n\nReactable(\n    orders,\n    columns={\n        \"Status\": Column(\n            cell=lambda ci: htmltools.div(status_badge(color=status_hsl[ci.value]), str(ci.value)),\n            html=True,\n        )\n    },\n)"
  },
  {
    "objectID": "demos/cookbook/index.html#bar-charts",
    "href": "demos/cookbook/index.html#bar-charts",
    "title": "Cookbook",
    "section": "Bar charts",
    "text": "Bar charts\n\nimport htmltools\n\nfrom reactable import Reactable, Column, CellInfo\nfrom reactable.data import cars_93\n\ndata = cars_93[:5, [\"make\", \"mpg_city\", \"mpg_highway\"]]\n\n\ndef html_barchart(label, width=\"100%\", height=\"1rem\", fill=\"#00bfc4\", background=None):\n    \"\"\"Create general purpose html fill bar.\"\"\"\n\n    bar = htmltools.div(style=f\"background: {fill}; width: {width}; height: {height}\")\n    chart = htmltools.div(\n        bar,\n        style=htmltools.css(\n            flex_grow=1,\n            margin_left=\"0.5rem\",\n            background=background,\n        ),\n    )\n    return htmltools.div(\n        label,\n        chart,\n        style=htmltools.css(\n            display=\"flex\",\n            align_items=\"center\",\n        ),\n    )\n\n\ndef fmt_barchart(ci: CellInfo, **kwargs):\n    \"\"\"Format cell value into html fill bar.\"\"\"\n\n    width = f\"{ci.value / max(data['mpg_city']) * 100}%\"\n    return html_barchart(ci.value, width=width, **kwargs)\n\n\nReactable(\n    data,\n    columns={\n        \"mpg_city\": Column(\n            name=\"MPG (city)\",\n            align=\"left\",\n            cell=fmt_barchart,\n        ),\n        \"mpg_highway\": Column(\n            name=\"MPG (highway)\",\n            align=\"left\",\n            cell=lambda ci: fmt_barchart(ci, fill=\"#fc5185\", background=\"#e1e1e1\"),\n        ),\n    },\n    default_page_size=5,\n)\n\n\n\n\n\nPositive and negative values\nTODO\n\n\nBackground bar charts\nTODO"
  },
  {
    "objectID": "demos/cookbook/index.html#embed-images",
    "href": "demos/cookbook/index.html#embed-images",
    "title": "Cookbook",
    "section": "Embed images",
    "text": "Embed images\n\nimport polars as pl\nimport htmltools\n\nfrom reactable import Reactable, Column, CellInfo\n\ndata = pl.DataFrame(\n    {\n        \"Animal\": [\"beaver\", \"cow\", \"wolf\", \"goat\"],\n        \"Body\": [1.35, 465, 36.33, 27.66],\n        \"Brain\": [8.1, 423, 119.5, 115],\n    }\n)\n\n\ndef fmt_image(ci: CellInfo):\n    image = htmltools.img(\n        src=f\"/demos/cookbook/images/{ci.value}.png\",\n        style=\"height: 24px;\",\n        alt=ci.value,\n    )\n    return htmltools.TagList(\n        htmltools.div(\n            image,\n            style=\"display: inline-block; width: 45px;\",\n        ),\n        ci.value,\n    )\n\n\nReactable(\n    data,\n    columns={\n        \"Animal\": Column(cell=fmt_image),\n        \"Body\": Column(name=\"Body (kg)\"),\n        \"Brain\": Column(name=\"Brain (g)\"),\n    },\n)\n\n\n\n\nNote that this example assumes the images are available (we did that by setting the resources: field in quarto)."
  },
  {
    "objectID": "demos/cookbook/index.html#rating-stars",
    "href": "demos/cookbook/index.html#rating-stars",
    "title": "Cookbook",
    "section": "Rating stars",
    "text": "Rating stars\n\n# pip install faicons\nimport polars as pl\nimport htmltools\n\nfrom faicons import icon_svg\nfrom reactable import Reactable, Column, CellInfo\n\nratings = pl.DataFrame(\n    {\n        \"Movie\": [\n            \"Silent Serpent\",\n            \"Nowhere to Hyde\",\n            \"The Ape-Man Goes to Mars\",\n            \"A Menace in Venice\",\n        ],\n        \"Rating\": [3.65, 2.35, 4.5, 1.4],\n        \"Votes\": [115, 37, 60, 99],\n    }\n)\n\n\ndef rating_stars(ci: CellInfo):\n    to_fill = round(ci.value)\n    # TODO: how to set aria?\n    stars = [\n        icon_svg(\n            \"star\", stroke=\"orange\" if ii &lt;= to_fill else \"#edf0f2\", stroke_width=100, fill=\"white\"\n        )\n        for ii in range(1, 6)\n    ]\n    return htmltools.div(*stars, title=\"{ci.value} out of 5 stars\")\n\n\nReactable(\n    ratings,\n    columns={\n        \"Rating\": Column(\n            cell=rating_stars,\n            html=True,\n        )\n    },\n)"
  },
  {
    "objectID": "demos/cookbook/index.html#show-data-from-other-columns",
    "href": "demos/cookbook/index.html#show-data-from-other-columns",
    "title": "Cookbook",
    "section": "Show data from other columns",
    "text": "Show data from other columns\n\nimport htmltools\n\nfrom reactable import Reactable, Column, CellInfo\nfrom reactable.data import starwars\n\ndata = starwars[[\"name\", \"height\", \"mass\", \"gender\", \"homeworld\", \"species\"]]\n\n\ndef fmt_name(ci: CellInfo):\n    species = data[\"species\"][ci.row_index]\n    species = species if species is not None else \"Unknown\"\n\n    return htmltools.div(\n        htmltools.div(ci.value, style=\"font-weight: 600;\"),\n        htmltools.div(species, style=\"font-size: 0.75rem;\"),\n    )\n\n\nReactable(\n    data,\n    columns={\n        \"name\": Column(\n            cell=fmt_name,\n            name=\"Character\",\n        ),\n        \"species\": Column(show=False),\n    },\n    default_col_def=Column(v_align=\"center\"),\n    default_page_size=4,\n)\n\n\n\n\n\nfrom reactable import Reactable, Column, JS\nfrom reactable.data import starwars\n\ndata = starwars[[\"name\", \"height\", \"mass\", \"gender\", \"homeworld\", \"species\"]]\n\njs_name = JS(\n    \"\"\"\n    function(cellInfo) {\n        const species = cellInfo.row[\"species\"] || \"Unknown\"\n        return `\n            &lt;div&gt;\n                &lt;div style=\"font-weight: 600\"&gt;${cellInfo.value}&lt;/div&gt;\n                &lt;div style=\"font-size: 0.75rem\"&gt;${species}&lt;/div&gt;\n            &lt;/div&gt;\n        `\n    }\n    \"\"\"\n)\n\nReactable(\n    data,\n    columns={\n        \"name\": Column(\n            cell=js_name,\n            html=True,\n        ),\n        \"species\": Column(show=False),\n    },\n    default_col_def=Column(v_align=\"center\"),\n    default_page_size=6,\n)"
  },
  {
    "objectID": "demos/cookbook/index.html#total-rows",
    "href": "demos/cookbook/index.html#total-rows",
    "title": "Cookbook",
    "section": "Total rows",
    "text": "Total rows\n\nFixed\n\nfrom reactable import Reactable, Column\nfrom reactable.data import cars_93\n\ndata = cars_93[[\"manufacturer\", \"model\", \"type\", \"price\"]]\n\nReactable(\n    data,\n    default_page_size=5,\n    columns={\n        \"manufacturer\": Column(footer=\"Total\"),\n        \"price\": Column(footer=f\"${sum(data['price']):.2f}\"),\n    },\n    default_col_def=Column(footer_style={\"font-weight\": \"bold\"}),\n)\n\n\n\n\n\n\nDynamic\n\nfrom reactable import JS\n\njs_sum_price = JS(\n    \"\"\"\n    function(column, state) {\n        let total = 0\n        state.sortedData.forEach(function(row) {\n            total += row[column.id]\n        })\n        return total.toLocaleString('en-US', { style: 'currency', currency: 'USD' })\n    }\n    \"\"\"\n)\n\nReactable(\n    data,\n    searchable=True,\n    default_page_size=5,\n    min_rows=5,\n    columns={\n        \"manufacturer\": Column(footer=\"Total\"),\n        \"price\": Column(footer=js_sum_price),\n    },\n    default_col_def=Column(footer_style={\"font-weight\": \"bold\"}),\n)"
  },
  {
    "objectID": "demos/cookbook/index.html#nested-tables",
    "href": "demos/cookbook/index.html#nested-tables",
    "title": "Cookbook",
    "section": "Nested tables",
    "text": "Nested tables\n\nimport polars as pl\nimport polars.selectors as cs\n\nfrom reactable import Reactable, Column\nfrom reactable.data import us_expenditures\n\ndata = (\n    us_expenditures.to_polars()\n    # tidy years from columns into rows\n    .unpivot(cs.starts_with(\"19\"), index=\"index\")\n)\n\nyear_dfs = list(g for k, g in data.group_by(\"variable\"))\nsummary_df = data.group_by(\"variable\").agg(n=pl.count())\n\nReactable(\n    summary_df,\n    # TODO: details should accept a function\n    details=Column(\n        details=lambda ri: Reactable(year_dfs[ri.row_index]).to_widget(),\n    ),\n)\n\n/tmp/ipykernel_2087/1028257606.py:14: DeprecationWarning:\n\n`pl.count()` is deprecated. Please use `pl.len()` instead."
  },
  {
    "objectID": "demos/cookbook/index.html#units-on-first-row-only",
    "href": "demos/cookbook/index.html#units-on-first-row-only",
    "title": "Cookbook",
    "section": "Units on first row only",
    "text": "Units on first row only\n\nfrom reactable.data import cars_93\nfrom reactable import Reactable, Column\n\ndata = cars_93[40:44, [\"make\", \"length\", \"luggage_room\"]]\n\n\ndef fmt_length(ci):\n    return f\"{ci.value}″\"\n\n\ndef fmt_ft(ci):\n    return f\"{ci.value} &lt;div class='units'&gt;ft³&lt;/div&gt;\"\n\n\nReactable(\n    data,\n    class_=\"car-specs\",\n    columns={\n        \"length\": Column(\n            cell=lambda ci: fmt_length(ci) if ci.row_index == 0 else str(ci.value),\n            class_=\"number\",\n        ),\n        \"luggage_room\": Column(\n            name=\"Luggage Room\",\n            cell=lambda ci: fmt_ft(ci) if ci.row_index == 0 else str(ci.value),\n            html=True,\n        ),\n    },\n)"
  },
  {
    "objectID": "demos/cookbook/index.html#tooltips",
    "href": "demos/cookbook/index.html#tooltips",
    "title": "Cookbook",
    "section": "Tooltips",
    "text": "Tooltips"
  },
  {
    "objectID": "demos/cookbook/index.html#highlight-cells",
    "href": "demos/cookbook/index.html#highlight-cells",
    "title": "Cookbook",
    "section": "Highlight cells",
    "text": "Highlight cells"
  },
  {
    "objectID": "demos/cookbook/index.html#highlight-columns",
    "href": "demos/cookbook/index.html#highlight-columns",
    "title": "Cookbook",
    "section": "Highlight columns",
    "text": "Highlight columns"
  },
  {
    "objectID": "demos/cookbook/index.html#highlight-rows",
    "href": "demos/cookbook/index.html#highlight-rows",
    "title": "Cookbook",
    "section": "Highlight rows",
    "text": "Highlight rows"
  },
  {
    "objectID": "demos/cookbook/index.html#highlight-sorted-headers",
    "href": "demos/cookbook/index.html#highlight-sorted-headers",
    "title": "Cookbook",
    "section": "Highlight sorted headers",
    "text": "Highlight sorted headers"
  },
  {
    "objectID": "demos/cookbook/index.html#highlight-sorted-columns",
    "href": "demos/cookbook/index.html#highlight-sorted-columns",
    "title": "Cookbook",
    "section": "Highlight sorted columns",
    "text": "Highlight sorted columns"
  },
  {
    "objectID": "demos/cookbook/index.html#borders-between-groups-of-data",
    "href": "demos/cookbook/index.html#borders-between-groups-of-data",
    "title": "Cookbook",
    "section": "Borders between groups of data",
    "text": "Borders between groups of data"
  },
  {
    "objectID": "demos/cookbook/index.html#merge-cells",
    "href": "demos/cookbook/index.html#merge-cells",
    "title": "Cookbook",
    "section": "Merge cells",
    "text": "Merge cells"
  },
  {
    "objectID": "demos/cookbook/index.html#borders-between-columns",
    "href": "demos/cookbook/index.html#borders-between-columns",
    "title": "Cookbook",
    "section": "Borders between columns",
    "text": "Borders between columns"
  },
  {
    "objectID": "demos/cookbook/index.html#style-nested-rows",
    "href": "demos/cookbook/index.html#style-nested-rows",
    "title": "Cookbook",
    "section": "Style nested rows",
    "text": "Style nested rows"
  },
  {
    "objectID": "demos/cookbook/index.html#custom-fonts",
    "href": "demos/cookbook/index.html#custom-fonts",
    "title": "Cookbook",
    "section": "Custom fonts",
    "text": "Custom fonts"
  },
  {
    "objectID": "demos/cookbook/index.html#custom-sort-indicators",
    "href": "demos/cookbook/index.html#custom-sort-indicators",
    "title": "Cookbook",
    "section": "Custom sort indicators",
    "text": "Custom sort indicators"
  },
  {
    "objectID": "demos/pypi-downloads/index.html",
    "href": "demos/pypi-downloads/index.html",
    "title": "PyPI Downloads",
    "section": "",
    "text": "import json\nimport polars as pl\nimport polars.selectors as cs\nfrom reactable import Reactable, Column, Theme, embed_css\nfrom reactable.tags import to_widget\nfrom reactable.models import RowInfo\nimport htmltools as ht\n\nembed_css()\n\nmonthly = pl.read_csv(\"./pypi-monthly.csv\", row_index_name=None)\ndetails = json.load(open(\"./pypi-details.json\"))\nouter_details = pl.DataFrame(\n    [\n        {\n            \"package\": x[\"name\"].lower().replace(\"_\", \"-\"),\n            \"version\": x[\"version\"],\n            \"summary\": x[\"summary\"],\n            \"published_at\": x[\"releases\"][0][\"published_at\"],\n        }\n        for x in details\n    ]\n)\n\nouter = monthly.join(outer_details, \"package\")\n\n\ndef detail_label(title, content):\n    return ht.div(title, class_=\"detail-label\"), content\n\n\ndef create_details(entry: RowInfo):\n    pkg = details[entry.row_index]\n    sub_frame = pl.DataFrame(pkg[\"releases\"])\n\n    sub_tbl = Reactable(\n        sub_frame,\n        pagination=False,\n        default_col_def=Column(header_class=\"header\"),\n        columns={\n            \"published_at\": Column(name=\"Published\", align=\"right\"),\n        },\n        class_=\"archived-table\",\n        theme=Theme(cell_padding=\"8px 16px\"),\n    )\n    return ht.div(\n        ht.div(\n            pkg[\"name\"],\n            # ht.span(pkg[\"summary\"], class_=\"detail-title\"),\n            class_=\"detail-header\",\n        ),\n        ht.div(\n            (pkg[\"summary\"] or [])[:200],\n            class_=\"detail-description\",\n        ),\n        *detail_label(\"Version\", pkg[\"version\"]),\n        *detail_label(\"Python Depends\", pkg[\"requires_python\"]),\n        *detail_label(\"Depends\", pkg[\"requires_dist\"]),\n        # *detail_label(\"Suggests\", pkg[\"\"]),\n        *detail_label(\"AUTHOR\", pkg[\"author\"]),\n        *detail_label(\"License\", pkg[\"license\"]),\n        *detail_label(\"URL\", pkg[\"home_page\"]),\n        *detail_label(\"Recent Versions\", sub_tbl.to_widget()),\n        class_=\"package-detail\",\n    )\nfrom IPython.display import HTML, display\n\ndisplay(HTML(html))\n\ntbl = Reactable(\n    outer.head(50),\n    default_sorted=[\"downloads_month\"],\n    default_page_size=10,\n    show_page_size_options=True,\n    page_size_options=[10, 20, 50, 100],\n    on_click=\"expand\",\n    resizable=True,\n    default_col_def=Column(header_class=\"header\"),\n    columns={\n        \"summary\": Column(\n            name=\"Summary\",\n            min_width=250,\n            class_=\"package-title\",\n            cell=lambda ci: ht.span(ci.value, title=ci.value),\n        ),\n        \"published_at\": Column(name=\"Published\", align=\"right\"),\n        \"downloads_month\": Column(\n            name=\"Downloads\",\n            default_sort_order=\"desc\",\n            cell=lambda ci: f\"{ci.value // 1_000_000:,}M\",\n        ),\n        \"package\": Column(name=\"Package\"),\n        \"version\": Column(name=\"Version\"),\n    },\n    wrap=False,\n    details=create_details,\n    class_=\"packages-table\",\n    row_style={\"cursor\": \"pointer\"},\n    theme=Theme(cell_padding=\"8px 12px\"),\n)\n\nto_widget(\n    ht.div(\n        # ht.h2(\"Top PyPI Monthly Downloads (Aug 1, 2024)\"),\n        tbl,\n        class_=\"cran-packages\",\n    )\n)\n\n&lt;link href=\"https://fonts.googleapis.com/css?family=Nunito:400,600,700&display=fallback rel=\"stylesheet\"&gt;\n\n&lt;style&gt;\n.cran-packages {\n  font-family: Nunito, \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n}\n\n.title {\n  font-size: 1.5rem;\n}\n\n.packages-table {\n  margin-top: 1rem;\n  font-size: 0.9375rem;\n  border: 1px solid hsl(213, 33%, 93%);\n  border-radius: 4px;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.1);\n}\n\n.header {\n  background-color: hsl(213, 45%, 97%);\n  border-bottom-color: hsl(213, 33%, 93%);\n  border-bottom-width: 1px;\n  color: hsl(213, 13%, 33%);\n}\n\n.header[aria-sort]:hover,\n.header[aria-sort]:focus {\n  color: hsl(213, 55%, 50%);\n}\n\n.units {\n  margin-left: 0.15em;\n  color: rgba(0, 0, 0, 0.6);\n}\n\n.package-title {\n  font-size: 0.875rem;\n}\n\n.package-detail {\n  padding: 24px;\n  box-shadow: inset 0 1px 3px #dbdbdb;\n  background: hsl(213, 20%, 99%);\n}\n\n.detail-label {\n  margin: 1.25rem 0 0.25rem;\n  font-size: 0.875rem;\n  color: rgba(0, 0, 0, 0.6);\n}\n\n.detail-header {\n  margin-bottom: 1rem;\n  font-size: 1.25rem;\n  font-weight: 600;\n}\n\n.detail-title {\n  margin-left: 1rem;\n  font-size: 0.875rem;\n  font-weight: 400;\n  color: rgba(0, 0, 0, 0.6);\n}\n\n.detail-description {\n  font-size: 0.875rem;\n}\n\n.archived-table {\n  max-width: 15rem;\n  border: 1px solid hsl(213, 33%, 93%);\n  border-radius: 4px;\n  box-shadow: 0 2px 7px 0 rgba(0, 0, 0, 0.05);\n  font-size: 0.875rem;\n}\n&lt;/style&gt;\n\nprint(\"yo2\")\n\nyo2"
  },
  {
    "objectID": "reference/Reactable.html",
    "href": "reference/Reactable.html",
    "title": "Reactable",
    "section": "",
    "text": "Reactable(\n    self,\n    data,\n    columns=None,\n    column_groups=None,\n    rownames=False,\n    group_by=None,\n    sortable=True,\n    resizable=None,\n    filterable=None,\n    searchable=None,\n    pagination=None,\n    default_col_def=None,\n    default_sort_order='asc',\n    default_sorted=None,\n    default_page_size=None,\n    show_page_size_options=None,\n    page_size_options=lambda: [10, 25, 50, 100](),\n    pagination_type='numbers',\n    show_pagination=None,\n    show_page_info=None,\n    min_rows=None,\n    paginate_sub_rows=None,\n    details=None,\n    default_expanded=None,\n    selection=None,\n    on_click=None,\n    highlight=False,\n    outlined=None,\n    bordered=False,\n    borderless=False,\n    striped=False,\n    compact=False,\n    wrap=True,\n    show_sort_icon=None,\n    show_sortable=None,\n    class_=None,\n    style=None,\n    row_class=None,\n    row_style=None,\n    full_width=True,\n    width=None,\n    height=None,\n    theme=None,\n    language=None,\n    meta=None,\n    element_id=None,\n    static=None,\n    dataKey=None,\n)\nA reactive table."
  },
  {
    "objectID": "reference/Reactable.html#parameters",
    "href": "reference/Reactable.html#parameters",
    "title": "Reactable",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\ndict[str, list[Any]] | DataFrameLike\nThe data.\nrequired\n\n\ncolumns\nlist[Column] | None\nNamed list of column definitions.\nNone\n\n\ncolumn_groups\nlist[ColGroup] | None\nList of column group definitions.\nNone\n\n\nsortable\nbool\nWhether to enable sorting. Defaults to True.\nTrue\n\n\nresizable\nbool | None\nWhether to enable column resizing.\nNone\n\n\nfilterable\nbool | None\nWhether to enable column filtering.\nNone\n\n\nsearchable\nbool | None\nWhether to enable global table searching.\nNone\n\n\npagination\nbool | None\nWhether to enable pagination.\nNone\n\n\ndefault_col_def\nInitVar[Column | None]\nDefault column definition used by every column.\nNone\n\n\ndefault_sort_order\nInitVar[Literal['asc', 'desc']]\nDefault sort order. Either “asc” for ascending order or “desc” for descending order. Defaults to “asc”.\n'asc'\n\n\ndefault_sorted\nlist[str] | dict[str, str] | None\nList of column names to sort by default. Or to customize sort order, a dictionary mapping column names to “asc” or “desc”.\nNone\n\n\ndefault_page_size\nint | None\nDefault page size for the table. Defaults to 10.\nNone\n\n\nshow_page_size_options\nbool | None\nWhether to show page size options.\nNone\n\n\npagination_type\nLiteral['numbers', 'jump', 'simple']\nPagination control to use. Either “numbers” for page number buttons (the default), “jump” for a page jump, or “simple” to show ‘Previous’ and ‘Next’ buttons only.\n'numbers'\n\n\nshow_pagination\nbool | None\nWhether to show pagination.\nNone\n\n\nshow_page_info\nbool | None\nWhether to show page info.\nNone\n\n\nmin_rows\nint | None\nMinimum number of rows to show per page. Defaults to 1.\nNone\n\n\npaginate_sub_rows\nbool | None\nWhen rows are grouped, paginate sub rows. Defaults to False.\nNone\n\n\ndetails\nInitVar[JS | Column | None]\nAdditional content to display when expanding a row.\nNone\n\n\ndefault_expanded\nbool | None\nWhether to expand all rows by default.\nNone\n\n\nselection\nLiteral['multiple', 'single'] | None\nEnable row selection. Either “multiple” or “single” for multiple or single row selection. To customize the selection column, use \".selection\" as the column name.\nNone\n\n\non_click\nLiteral['expand', 'select'] | JsFunction | None\nAction to take when clicking a cell. Either “expand” to expand the row, “select” to select the row, or a JS function that takes a row info object as an argument.\nNone\n\n\nhighlight\nbool\nWhether to highlight table rows on hover.\nFalse\n\n\noutlined\nbool | None\nWhether to add borders around the table.\nNone\n\n\nbordered\nbool\nWhether to add borders around the table and every cell.\nFalse\n\n\nborderless\nbool\nWhether to remove inner borders from table.\nFalse\n\n\nstriped\nbool\nWhether to add zebra-striping to table rows.\nFalse\n\n\ncompact\nbool\nWhether to make tables more compact.\nFalse\n\n\nwrap\nInitVar[bool]\nWhether to enable text wrapping. If True (the default), long text will be wrapped to multiple lines. If False, text will be truncated to fit on one line.\nTrue\n\n\nshow_sort_icon\nbool | None\nWhether to show a sort icon when sorting columns.\nNone\n\n\nshow_sortable\nbool | None\nWhether to show an indicator on sortable columns.\nNone\n\n\nclass_\nInitVar[str | list[str] | None]\nAdditional CSS classes to apply to the table.\nNone\n\n\nstyle\nCssRules | None\nInline styles to apply to the table.\nNone\n\n\nrow_class\nInitVar[list[str] | Callable[RowIndx, list[str]] | None]\nAdditional CSS classes to apply to table rows.\nNone\n\n\nrow_style\nCssRules | Callable[RowIndx, dict[str, str]] | None\nInline styles to apply to table rows.\nNone\n\n\nfull_width\nInitVar[bool]\nWhether to stretch the table to fill the full width of its container. Defaults to True.\nTrue\n\n\nwidth\nint | None\nWidth of the table in pixels. Defaults to “auto” for automatic sizing.\nNone\n\n\nheight\nint | None\nHeight of the table in pixels. Defaults to “auto” for automatic sizing.\nNone\n\n\ntheme\nTheme | None\nTheme options for the table, specified by Theme(). Defaults to the global reactable.theme option.\nNone\n\n\nlanguage\nstr | None\nLanguage options for the table, specified by Language(). Defaults to the global reactable.language option.\nNone\n\n\nmeta\ndict[str, Any] | None\nCustom metadata to pass to JavaScript render functions or style functions.\nNone\n\n\nelement_id\nstr | None\nElement ID for the widget\nNone"
  },
  {
    "objectID": "reference/Reactable.html#examples",
    "href": "reference/Reactable.html#examples",
    "title": "Reactable",
    "section": "Examples",
    "text": "Examples\n\nfrom reactable import Reactable, Column, ColFormat\nfrom reactable.data import cars_93\n\nReactable(\n    cars_93[:, [\"manufacturer\", \"model\", \"price\"]],\n    columns = {\n        \"price\": Column(\n            name=\"Price\",\n            format=ColFormat(prefix=\"$\", digits=2),\n        ),\n    },\n    filterable=True\n)"
  },
  {
    "objectID": "reference/ColFormat.html",
    "href": "reference/ColFormat.html",
    "title": "ColFormat",
    "section": "",
    "text": "ColFormat(\n    self,\n    prefix=None,\n    suffix=None,\n    digits=None,\n    separators=None,\n    percent=None,\n    currency=None,\n    datetime=None,\n    date=None,\n    time=None,\n    hour12=None,\n    locales=None,\n)\nSpecify formatting for a Column.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nprefix\nstr | None\nPrefix string.\nNone\n\n\nsuffix\nstr | None\nSuffix string.\nNone\n\n\ndigits\nint | None\nNumber of decimal digits to use for numbers.\nNone\n\n\nseparators\nbool | None\nWhether to use grouping separators for numbers, such as thousands separators or thousand/lakh/crore separators. The format is locale-dependent.\nNone\n\n\npercent\nbool | None\nFormat number as a percentage? The format is locale-dependent.\nNone\n\n\ncurrency\nStrIsoCurrency | None\nCurrency format. An ISO 4217 currency code such as “USD” for the US dollar, “EUR” for the euro, or “CNY” for the Chinese RMB. The format is locale-dependent.\nNone\n\n\ndatetime\nbool | None\nWhether to format as a locale-dependent date-time.\nNone\n\n\ndate\nbool | None\nWhether to format as a locale-dependent date.\nNone\n\n\ntime\nbool | None\nWhether to format as a locale-dependent time.\nNone\n\n\nhour12\nbool | None\nWhether to use 12-hour time (True) or 24-hour time (False). The default time convention is locale-dependent.\nNone\n\n\nlocales\nbool | None\nLocales to use for number, date, time, and currency formatting. A character vector of BCP 47 language tags, such as “en-US” for English (United States), “hi” for Hindi, or “sv-SE” for Swedish (Sweden). Defaults to the locale of the user’s browser. Multiple locales may be specified to provide a fallback language in case a locale is unsupported. When multiple locales are specified, the first supported locale will be used. See a list of common BCP 47 language tags for reference.\nNone"
  },
  {
    "objectID": "reference/ColFormat.html#parameters",
    "href": "reference/ColFormat.html#parameters",
    "title": "ColFormat",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nprefix\nstr | None\nPrefix string.\nNone\n\n\nsuffix\nstr | None\nSuffix string.\nNone\n\n\ndigits\nint | None\nNumber of decimal digits to use for numbers.\nNone\n\n\nseparators\nbool | None\nWhether to use grouping separators for numbers, such as thousands separators or thousand/lakh/crore separators. The format is locale-dependent.\nNone\n\n\npercent\nbool | None\nFormat number as a percentage? The format is locale-dependent.\nNone\n\n\ncurrency\nStrIsoCurrency | None\nCurrency format. An ISO 4217 currency code such as “USD” for the US dollar, “EUR” for the euro, or “CNY” for the Chinese RMB. The format is locale-dependent.\nNone\n\n\ndatetime\nbool | None\nWhether to format as a locale-dependent date-time.\nNone\n\n\ndate\nbool | None\nWhether to format as a locale-dependent date.\nNone\n\n\ntime\nbool | None\nWhether to format as a locale-dependent time.\nNone\n\n\nhour12\nbool | None\nWhether to use 12-hour time (True) or 24-hour time (False). The default time convention is locale-dependent.\nNone\n\n\nlocales\nbool | None\nLocales to use for number, date, time, and currency formatting. A character vector of BCP 47 language tags, such as “en-US” for English (United States), “hi” for Hindi, or “sv-SE” for Swedish (Sweden). Defaults to the locale of the user’s browser. Multiple locales may be specified to provide a fallback language in case a locale is unsupported. When multiple locales are specified, the first supported locale will be used. See a list of common BCP 47 language tags for reference.\nNone"
  },
  {
    "objectID": "reference/to_widget.html",
    "href": "reference/to_widget.html",
    "title": "to_widget",
    "section": "",
    "text": "to_widget\nto_widget(el)\nConvert htmltools element to ipyreact widget"
  },
  {
    "objectID": "reference/RowInfo.html",
    "href": "reference/RowInfo.html",
    "title": "RowInfo",
    "section": "",
    "text": "RowInfo\nRowInfo(self, row_index, column_name)\nRow data for custom rendering of details."
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "Classes to build reactable tables.\n\n\n\nReactable\nA reactive table.\n\n\n\n\n\n\n\n\n\nColumn\nConfigure a table column.\n\n\nColGroup\nConfigure a column group (spanner).\n\n\nColFormat\nSpecify formatting for a Column.\n\n\nColFormatGroupBy\nSpecify formatters for standard and aggregate cells.\n\n\n\n\n\n\n\n\n\nTheme\nTheme configuration.\n\n\nLanguage\nLanguage options.\n\n\n\n\n\n\nClasses used in custom rendering functions.\n\n\n\nCellInfo\nCell data for custom rendering of cells, class_, and style.\n\n\nRowInfo\nRow data for custom rendering of details.\n\n\nColInfo\nColumn data for custom rendering of footers.\n\n\nHeaderCellInfo\nHeader cell data for custom rendering of column header (column labels).\n\n\nJS\nA javascript function for rendering.\n\n\n\n\n\n\n\n\n\nto_widget\nConvert htmltools element to ipyreact widget"
  },
  {
    "objectID": "reference/index.html#create-tables",
    "href": "reference/index.html#create-tables",
    "title": "Function reference",
    "section": "",
    "text": "Classes to build reactable tables.\n\n\n\nReactable\nA reactive table."
  },
  {
    "objectID": "reference/index.html#customize-columns",
    "href": "reference/index.html#customize-columns",
    "title": "Function reference",
    "section": "",
    "text": "Column\nConfigure a table column.\n\n\nColGroup\nConfigure a column group (spanner).\n\n\nColFormat\nSpecify formatting for a Column.\n\n\nColFormatGroupBy\nSpecify formatters for standard and aggregate cells."
  },
  {
    "objectID": "reference/index.html#customize-tables",
    "href": "reference/index.html#customize-tables",
    "title": "Function reference",
    "section": "",
    "text": "Theme\nTheme configuration.\n\n\nLanguage\nLanguage options."
  },
  {
    "objectID": "reference/index.html#rendering",
    "href": "reference/index.html#rendering",
    "title": "Function reference",
    "section": "",
    "text": "Classes used in custom rendering functions.\n\n\n\nCellInfo\nCell data for custom rendering of cells, class_, and style.\n\n\nRowInfo\nRow data for custom rendering of details.\n\n\nColInfo\nColumn data for custom rendering of footers.\n\n\nHeaderCellInfo\nHeader cell data for custom rendering of column header (column labels).\n\n\nJS\nA javascript function for rendering."
  },
  {
    "objectID": "reference/index.html#helpers",
    "href": "reference/index.html#helpers",
    "title": "Function reference",
    "section": "",
    "text": "to_widget\nConvert htmltools element to ipyreact widget"
  },
  {
    "objectID": "reference/ColInfo.html",
    "href": "reference/ColInfo.html",
    "title": "ColInfo",
    "section": "",
    "text": "ColInfo\nColInfo(self, values, name)\nColumn data for custom rendering of footers."
  },
  {
    "objectID": "reference/Language.html",
    "href": "reference/Language.html",
    "title": "Language",
    "section": "",
    "text": "Language(\n    self,\n    sort_label='Sort {name}',\n    filter_placeholder='',\n    filter_label='Filter {name}',\n    search_placeholder='Search',\n    search_label='Search',\n    no_data='No rows found',\n    page_next='Next',\n    page_previous='Previous',\n    page_numbers='{page} of {pages}',\n    page_info='{rowStart}–{rowEnd} of {rows} rows',\n    page_size_options='Show {rows}',\n    page_next_label='Next page',\n    page_previous_label='Previous page',\n    page_number_label='Page {page}',\n    page_jump_label='Go to page',\n    page_size_options_label='Rows per page',\n    group_expand_label='Toggle group',\n    details_expand_label='Toggle details',\n    select_all_rows_label='Select all rows',\n    select_all_sub_rows_label='Select all rows in group',\n    select_row_label='Select row',\n)\nLanguage options.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsort_label\nstr\nAccessible label for column sort buttons. Takes a {name} parameter for the column name.\n'Sort {name}'\n\n\nfilter_placeholder\nstr\nPlaceholder for column filter inputs.\n''\n\n\nfilter_label\nstr\nAccessible label for column filter inputs. Takes a {name} parameter for the column name.\n'Filter {name}'\n\n\nsearch_placeholder\nstr\nPlaceholder for the table search input.\n'Search'\n\n\nsearch_label\nstr\nAccessible label for the table search input.\n'Search'\n\n\nno_data\nstr\nPlaceholder text when the table has no data.\n'No rows found'\n\n\npage_next\nstr\nText for the next page button.\n'Next'\n\n\npage_previous\nstr\nText for the previous page button.\n'Previous'\n\n\npage_numbers\nstr\nText for the page numbers info. Only used with the “jump” and “simple” pagination types. Takes the following parameters: {page} for the current page, {pages} for the total number of pages.\n'{page} of {pages}'\n\n\npage_info\nstr\nText for the page info. Takes the following parameters: {rowStart} for the starting row of the page, {rowEnd} for the ending row of the page, {rows} for the total number of rows.\n'{rowStart}–{rowEnd} of {rows} rows'\n\n\npage_size_options\nstr\nText for the page size options input. Takes a {rows} parameter for the page size options input.\n'Show {rows}'\n\n\npage_next_label\nstr\nAccessible label for the next page button.\n'Next page'\n\n\npage_previous_label\nstr\nAccessible label for the previous page button.\n'Previous page'\n\n\npage_number_label\nstr\nAccessible label for the page number buttons. Only used with the the “numbers” pagination type. Takes a {page} parameter for the page number.\n'Page {page}'\n\n\npage_jump_label\nstr\nAccessible label for the page jump input. Only used with the “jump” pagination type.\n'Go to page'\n\n\npage_size_options_label\nstr\nAccessible label for the page size options input.\n'Rows per page'\n\n\ngroup_expand_label\nstr\nAccessible label for the row group expand button.\n'Toggle group'\n\n\ndetails_expand_label\nstr\nAccessible label for the row details expand button.\n'Toggle details'\n\n\nselect_all_rows_label\nstr\nAccessible label for the select all rows checkbox.\n'Select all rows'\n\n\nselect_all_sub_rows_label\nstr\nAccessible label for the select all sub rows checkbox.\n'Select all rows in group'\n\n\nselect_row_label\nstr\nAccessible label for the select row checkbox.\n'Select row'"
  },
  {
    "objectID": "reference/Language.html#parameters",
    "href": "reference/Language.html#parameters",
    "title": "Language",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nsort_label\nstr\nAccessible label for column sort buttons. Takes a {name} parameter for the column name.\n'Sort {name}'\n\n\nfilter_placeholder\nstr\nPlaceholder for column filter inputs.\n''\n\n\nfilter_label\nstr\nAccessible label for column filter inputs. Takes a {name} parameter for the column name.\n'Filter {name}'\n\n\nsearch_placeholder\nstr\nPlaceholder for the table search input.\n'Search'\n\n\nsearch_label\nstr\nAccessible label for the table search input.\n'Search'\n\n\nno_data\nstr\nPlaceholder text when the table has no data.\n'No rows found'\n\n\npage_next\nstr\nText for the next page button.\n'Next'\n\n\npage_previous\nstr\nText for the previous page button.\n'Previous'\n\n\npage_numbers\nstr\nText for the page numbers info. Only used with the “jump” and “simple” pagination types. Takes the following parameters: {page} for the current page, {pages} for the total number of pages.\n'{page} of {pages}'\n\n\npage_info\nstr\nText for the page info. Takes the following parameters: {rowStart} for the starting row of the page, {rowEnd} for the ending row of the page, {rows} for the total number of rows.\n'{rowStart}–{rowEnd} of {rows} rows'\n\n\npage_size_options\nstr\nText for the page size options input. Takes a {rows} parameter for the page size options input.\n'Show {rows}'\n\n\npage_next_label\nstr\nAccessible label for the next page button.\n'Next page'\n\n\npage_previous_label\nstr\nAccessible label for the previous page button.\n'Previous page'\n\n\npage_number_label\nstr\nAccessible label for the page number buttons. Only used with the the “numbers” pagination type. Takes a {page} parameter for the page number.\n'Page {page}'\n\n\npage_jump_label\nstr\nAccessible label for the page jump input. Only used with the “jump” pagination type.\n'Go to page'\n\n\npage_size_options_label\nstr\nAccessible label for the page size options input.\n'Rows per page'\n\n\ngroup_expand_label\nstr\nAccessible label for the row group expand button.\n'Toggle group'\n\n\ndetails_expand_label\nstr\nAccessible label for the row details expand button.\n'Toggle details'\n\n\nselect_all_rows_label\nstr\nAccessible label for the select all rows checkbox.\n'Select all rows'\n\n\nselect_all_sub_rows_label\nstr\nAccessible label for the select all sub rows checkbox.\n'Select all rows in group'\n\n\nselect_row_label\nstr\nAccessible label for the select row checkbox.\n'Select row'"
  },
  {
    "objectID": "get-started/structure-grouping.html",
    "href": "get-started/structure-grouping.html",
    "title": "Row groups and aggregation",
    "section": "",
    "text": "from reactable import Reactable, Column, ColFormat, ColGroup, JS, embed_css\nfrom reactable.data import us_states, cars_93\n\nembed_css()\nYou can group rows in a table by specifying one or more columns in group_by:\ndata = cars_93[10:22, [\"manufacturer\", \"model\", \"type\", \"price\", \"mpg_city\"]]\n\nReactable(\n    data,\n    group_by=\"manufacturer\",\n)\nWhen rows are grouped, you can aggregate data in a column using an aggregate function:\ndata = cars_93[14:38, [\"type\", \"price\", \"mpg_city\", \"drive_train\", \"man_trans_avail\"]]\nReactable(\n    data,\n    group_by=\"type\",\n    columns=[\n        Column(id=\"price\", aggregate=\"max\"),\n        Column(id=\"mpg_city\", aggregate=\"mean\", format=ColFormat(digits=1)),\n        Column(id=\"drive_train\", aggregate=\"unique\"),\n        Column(id=\"man_trans_avail\", aggregate=\"frequency\"),\n    ],\n)\nYou can use one of the built-in aggregate functions:\nColumn(aggregate = \"sum\")        # Sum of numbers\nColumn(aggregate = \"mean\")       # Mean of numbers\nColumn(aggregate = \"max\")        # Maximum of numbers\nColumn(aggregate = \"min\")        # Minimum of numbers\nColumn(aggregate = \"median\")     # Median of numbers\nColumn(aggregate = \"count\")      # Count of values\nColumn(aggregate = \"unique\")     # Comma-separated list of unique values\nColumn(aggregate = \"frequency\")  # Comma-separated counts of unique values\n\nColumn(name=None, aggregate='frequency', sortable=None, resizable=None, filterable=None, searchable=None, filter_method=None, show=None, default_sort_order=None, sort_na_last=None, format=None, cell=None, grouped=None, aggregated=None, header=None, footer=None, details=None, html=None, na=None, row_header=None, min_width=None, max_width=None, width=None, align=None, v_align=None, header_v_align=None, sticky=None, class_=None, style=None, header_class=None, header_style=None, footer_class=None, footer_style=None, id=None, default_sort_desc=None, type=None, _selectable=False)\nOr a custom aggregate function in JavaScript:\nColumn(\n    aggregate=JS(\n        \"\"\"\n    function(values, rows) {\n      // input:\n      //  - values: an array of all values in the group\n      //  - rows: an array of row data values for all rows in the group (optional)\n      //\n      // output:\n      //  - an aggregated value, e.g. a comma-separated list\n      return values.join(', ')\n    }\n  \"\"\"\n    )\n)\n\nColumn(name=None, aggregate=JS(code=\"\\n    function(values, rows) {\\n      // input:\\n      //  - values: an array of all values in the group\\n      //  - rows: an array of row data values for all rows in the group (optional)\\n      //\\n      // output:\\n      //  - an aggregated value, e.g. a comma-separated list\\n      return values.join(', ')\\n    }\\n  \"), sortable=None, resizable=None, filterable=None, searchable=None, filter_method=None, show=None, default_sort_order=None, sort_na_last=None, format=None, cell=None, grouped=None, aggregated=None, header=None, footer=None, details=None, html=None, na=None, row_header=None, min_width=None, max_width=None, width=None, align=None, v_align=None, header_v_align=None, sticky=None, class_=None, style=None, header_class=None, header_style=None, footer_class=None, footer_style=None, id=None, default_sort_desc=None, type=None, _selectable=False)",
    "crumbs": [
      "Get Started",
      "Structure",
      "Row groups and aggregation"
    ]
  },
  {
    "objectID": "get-started/structure-grouping.html#multiple-groups",
    "href": "get-started/structure-grouping.html#multiple-groups",
    "title": "Row groups and aggregation",
    "section": "Multiple groups",
    "text": "Multiple groups\n\nReactable(\n    us_states,\n    group_by=[\"Region\", \"Division\"],\n    columns=[\n        Column(id=\"Division\", aggregate=\"unique\"),\n        Column(id=\"Area\", aggregate=\"sum\", format=ColFormat(separators=True)),\n    ],\n)",
    "crumbs": [
      "Get Started",
      "Structure",
      "Row groups and aggregation"
    ]
  },
  {
    "objectID": "get-started/structure-grouping.html#custom-aggregate-function",
    "href": "get-started/structure-grouping.html#custom-aggregate-function",
    "title": "Row groups and aggregation",
    "section": "Custom aggregate function",
    "text": "Custom aggregate function\nCustom aggregate functions are useful when none of the built-in aggregate functions apply, or when you want to aggregate values from multiple columns. For example, when calculating aggregate averages or percentages.\nWithin a custom aggregate function, you can access the values in the column using the values argument, and the values in other columns using the rows argument:\nTODO",
    "crumbs": [
      "Get Started",
      "Structure",
      "Row groups and aggregation"
    ]
  },
  {
    "objectID": "get-started/structure-grouping.html#include-sub-rows-in-pagination",
    "href": "get-started/structure-grouping.html#include-sub-rows-in-pagination",
    "title": "Row groups and aggregation",
    "section": "Include sub rows in pagination",
    "text": "Include sub rows in pagination\nBy default, sub rows are excluded from pagination and always shown on the same page when expanded. To include sub rows in pagination, you can set paginate_sub_rows=True. This is recommended for grouped tables with a large number of rows where expanded rows may not all fit on one page.\n\ndata = cars_93[[\"manufacturer\", \"model\", \"type\", \"price\", \"mpg_city\"]]\n\nReactable(\n    data=cars_93,\n    group_by=\"type\",\n    paginate_sub_rows=True,\n)",
    "crumbs": [
      "Get Started",
      "Structure",
      "Row groups and aggregation"
    ]
  },
  {
    "objectID": "get-started/structure-grouping.html#sticky-column-groups",
    "href": "get-started/structure-grouping.html#sticky-column-groups",
    "title": "Row groups and aggregation",
    "section": "Sticky column groups",
    "text": "Sticky column groups\n\nReactable(\n    cars_93[:5, :],\n    column_groups=[\n        ColGroup(name=\"Make\", columns=[\"manufacturer\", \"model\"], sticky=\"left\"),\n        ColGroup(name=\"Price\", columns=[\"min_price\", \"price\", \"max_price\"], sticky=\"left\"),\n    ],\n    default_col_def=Column(footer=\"Footer\"),\n    resizable=True,\n    wrap=False,\n    bordered=True,\n)",
    "crumbs": [
      "Get Started",
      "Structure",
      "Row groups and aggregation"
    ]
  },
  {
    "objectID": "get-started/controls-searching.html",
    "href": "get-started/controls-searching.html",
    "title": "Searching",
    "section": "",
    "text": "from reactable import Reactable, embed_css\nfrom reactable.data import cars_93\n\nembed_css()\n\n\n    \n    \n    \n    \n    \n\n\nYou can make the entire table searchable by setting searchable=True:\n\ncars = cars_93[:20, [\"manufacturer\", \"model\", \"type\", \"air_bags\", \"price\"]]\nReactable(data=cars, searchable=True, min_rows=10)\n\n\n\n\n\nCustom searching\nThe table search method can be customized using the searchMethod argument in reactable(). See the Custom filtering guide for details and examples.",
    "crumbs": [
      "Get Started",
      "Controls",
      "Searching"
    ]
  },
  {
    "objectID": "get-started/format-header-footer.html",
    "href": "get-started/format-header-footer.html",
    "title": "Rendering header and footer",
    "section": "",
    "text": "import htmltools as html\n\nfrom reactable.data import cars_93\nfrom reactable import Reactable, Column, embed_css\n\nembed_css()\n\ndata = cars_93[20:25, [\"manufacturer\", \"model\", \"type\", \"price\"]]",
    "crumbs": [
      "Get Started",
      "Format",
      "Rendering header and footer"
    ]
  },
  {
    "objectID": "get-started/format-header-footer.html#headers",
    "href": "get-started/format-header-footer.html#headers",
    "title": "Rendering header and footer",
    "section": "Headers",
    "text": "Headers\n\nfrom reactable.models import HeaderCellInfo\n\ndef fmt_header(ci: HeaderCellInfo):\n    return html.div(f\"name: {ci.name}\", html.br(), f\"value: {ci.value}\")\n\n\nReactable(\n    data,\n    columns={\"manufacturer\": Column(header=fmt_header, name=\"Manufacturer\")},\n)",
    "crumbs": [
      "Get Started",
      "Format",
      "Rendering header and footer"
    ]
  },
  {
    "objectID": "get-started/format-header-footer.html#footers",
    "href": "get-started/format-header-footer.html#footers",
    "title": "Rendering header and footer",
    "section": "Footers",
    "text": "Footers\n\nfrom reactable.models import ColInfo\n\n\ndef fmt_footer(ci: ColInfo):\n    ttl = sum(ci.values)\n    return f\"${ttl:.2f}\"\n\n\nReactable(\n    data,\n    searchable=True,\n    columns={\"price\": Column(footer=fmt_footer)},\n)\n\n\n\n\nNote that a sum of $79.10 appears at the bottom right of the table. Importantly, if you filter the rows by typing into the search box, the sum won’t update. This is because Python footers are rendered only once, when generating the initial table.",
    "crumbs": [
      "Get Started",
      "Format",
      "Rendering header and footer"
    ]
  },
  {
    "objectID": "get-started/extra-advanced-filters.html",
    "href": "get-started/extra-advanced-filters.html",
    "title": "Javascript filters",
    "section": "",
    "text": "reactable supports advanced customization of filters and searchbars. See the R documentation on Custom filtering for a tutorial with many examples.",
    "crumbs": [
      "Get Started",
      "Extra",
      "Javascript filters"
    ]
  },
  {
    "objectID": "get-started/structure-details.html",
    "href": "get-started/structure-details.html",
    "title": "Expandable details",
    "section": "",
    "text": "from reactable import Reactable, Column, ColFormat, JS, embed_css\nfrom reactable.data import penguins\n\nimport polars as pl\n\n\nembed_css()\n\npl_penguins = penguins.to_polars()\nYou can make rows expandable with additional content through details, which takes an Python or JavaScript render function. See Custom Rendering for details on how to use render functions.",
    "crumbs": [
      "Get Started",
      "Structure",
      "Expandable details"
    ]
  },
  {
    "objectID": "get-started/structure-details.html#render-details-with-python",
    "href": "get-started/structure-details.html#render-details-with-python",
    "title": "Expandable details",
    "section": "Render details with Python",
    "text": "Render details with Python\n\nimport htmltools\n\nReactable(\n    pl_penguins,\n    details=lambda row_info: htmltools.div(\n        \"Details for row: \", row_info.row_index, htmltools.pre(\"nice\")\n    ),\n)",
    "crumbs": [
      "Get Started",
      "Structure",
      "Expandable details"
    ]
  },
  {
    "objectID": "get-started/structure-details.html#render-details-with-js",
    "href": "get-started/structure-details.html#render-details-with-js",
    "title": "Expandable details",
    "section": "Render details with JS",
    "text": "Render details with JS\nThe details column can be customized by providing a Column() instead. This can be used to add a column name, render HTML content, or change the column width:\n\njs_details = JS(\n    \"\"\"function(rowInfo) {\n  return `Details for row: ${rowInfo.index}` +\n    `&lt;pre&gt;${JSON.stringify(rowInfo.values, null, 2)}&lt;/pre&gt;`\n}\"\"\"\n)\n\nReactable(\n    pl_penguins,\n    details=Column(\n        name=\"more\",\n        html=True,\n        width=60,\n        details=js_details,\n    ),\n)",
    "crumbs": [
      "Get Started",
      "Structure",
      "Expandable details"
    ]
  },
  {
    "objectID": "get-started/structure-details.html#nested-tables",
    "href": "get-started/structure-details.html#nested-tables",
    "title": "Expandable details",
    "section": "Nested tables",
    "text": "Nested tables\nWith Python render functions, you can render HTML tags, Widgets (e.g. ipywidget, anywidget), and even nested tables:\n\nfrom htmltools import HTML, div\n\n\nsub_tables = {\n    g: div(Reactable(df, outlined=True).to_widget(), style=\"padding: 1rem\")\n    for g, df in pl_penguins.group_by(\"species\", \"island\")\n}\n\ndf_uniq = pl_penguins.select([\"species\", \"island\"]).unique()\n\nReactable(\n    df_uniq,\n    details=lambda row_info: list(sub_tables.values())[row_info.row_index],\n)",
    "crumbs": [
      "Get Started",
      "Structure",
      "Expandable details"
    ]
  },
  {
    "objectID": "get-started/structure-details.html#conditional-row-details",
    "href": "get-started/structure-details.html#conditional-row-details",
    "title": "Expandable details",
    "section": "Conditional row details",
    "text": "Conditional row details\nPython render functions support conditional rendering. If a render function returns None, the row won’t be expandable:\n\nsub_frame = pl.DataFrame({\"x\": [1, 2, 3], \"y\": [\"a\", \"b\", \"c\"]})\n\nReactable(\n    pl_penguins[:5],\n    details=lambda row_info: (\n        Reactable(sub_frame, full_width=False).to_widget() if row_info.row_index in [2, 4] else None\n    ),\n)",
    "crumbs": [
      "Get Started",
      "Structure",
      "Expandable details"
    ]
  },
  {
    "objectID": "get-started/structure-details.html#multiple-row-details",
    "href": "get-started/structure-details.html#multiple-row-details",
    "title": "Expandable details",
    "section": "Multiple row details",
    "text": "Multiple row details\nYou can add details to individual columns, and even show multiple details for a row:\n\nsub_frame = pl.DataFrame({\"x\": [1, 2, 3], \"y\": [\"a\", \"b\", \"c\"]})\nReactable(\n    pl_penguins[:5],\n    details=lambda row_info: (\n        Reactable(sub_frame, full_width=False).to_widget() if row_info.row_index in [2, 4] else None\n    ),\n    columns=[\n        Column(\n            id=\"bill_length_mm\",\n            details=lambda row_info: f\"bill_length_mm: {pl_penguins[row_info.row_index, 'bill_length_mm']}\",\n        ),\n        Column(\n            id=\"bill_depth_mm\",\n            format=ColFormat(digits=1),\n            details=JS(\n                \"\"\"\n            function(rowInfo) {\n                return 'bill_depth_mm: ' + rowInfo.values['bill_depth_mm']\n            }\n            \"\"\"\n            ),\n        ),\n    ],\n)",
    "crumbs": [
      "Get Started",
      "Structure",
      "Expandable details"
    ]
  },
  {
    "objectID": "get-started/structure-details.html#default-expanded-rows",
    "href": "get-started/structure-details.html#default-expanded-rows",
    "title": "Expandable details",
    "section": "Default expanded rows",
    "text": "Default expanded rows\nYou can expand all rows by default by setting default_expanded=True:\n\nReactable(\n    pl_penguins[:12],\n    default_page_size=4,\n    details=lambda indx: f\"Details for row: {indx}\",\n    default_expanded=True,\n)",
    "crumbs": [
      "Get Started",
      "Structure",
      "Expandable details"
    ]
  },
  {
    "objectID": "get-started/style-theming.html",
    "href": "get-started/style-theming.html",
    "title": "Theming",
    "section": "",
    "text": "Themes provide a powerful way to customize table styling that can be reused across tables. You can either set theme variables to change the default styles (e.g., row stripe color), or add your own custom CSS to specific elements of the table.\nTo apply a theme, provide a Theme() as the theme= argument:\nfrom reactable import Reactable, Theme, options, embed_css\nfrom reactable.data import cars_93\n\nembed_css()\nReactable(\n    cars_93,\n    searchable=True,\n    striped=True,\n    highlight=True,\n    bordered=True,\n    theme=Theme(\n        border_color=\"#dfe2e5\",\n        striped_color=\"#f6f8fa\",\n        highlight_color=\"#f0f5f9\",\n        cell_padding=\"8px 12px\",\n        style={\n            \"font-family\": \"-apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif\"\n        },\n        search_input_style={\"width\": \"100%\"},\n    ),\n)",
    "crumbs": [
      "Get Started",
      "Style",
      "Theming"
    ]
  },
  {
    "objectID": "get-started/style-theming.html#global-theme",
    "href": "get-started/style-theming.html#global-theme",
    "title": "Theming",
    "section": "Global theme",
    "text": "Global theme\nTo set the default theme for all tables, set the global reactable.options.theme attribute:\n\noptions.theme = Theme(\n    color=\"hsl(233, 9%, 87%)\",\n    background_color=\"hsl(233, 9%, 19%) !important\",\n    border_color=\"hsl(233, 9%, 22%) !important\",\n    striped_color=\"hsl(233, 12%, 22%)\",\n    highlight_color=\"hsl(233, 12%, 24%)\",\n    input_style={\"background-color\": \"hsl(233, 9%, 25%) !important\"},\n    select_style={\"background-color\": \"hsl(233, 9%, 25%)\"},\n    page_button_hover_style={\"background-color\": \"hsl(233, 9%, 25%)\"},\n    page_button_active_style={\"background-color\": \"hsl(233, 9%, 28%)\"},\n)\n\nReactable(\n    cars_93,\n    filterable=True,\n    show_page_size_options=True,\n    striped=True,\n    highlight=True,\n    details=lambda index: f\"Details for row {index}\",\n)\n\n\n\n\nTo restore options to the defaults, use the .reset() method:\n\noptions.reset()",
    "crumbs": [
      "Get Started",
      "Style",
      "Theming"
    ]
  },
  {
    "objectID": "get-started/controls-filtering.html",
    "href": "get-started/controls-filtering.html",
    "title": "Filtering",
    "section": "",
    "text": "from reactable import Reactable, Column, JS, embed_css\nfrom reactable.data import cars_93, penguins\n\nimport polars as pl\n\nembed_css()\n\npl_penguins = penguins.to_polars()\n\ncars = cars_93[:20, [\"manufacturer\", \"model\", \"type\", \"air_bags\", \"price\"]]\n\n\n    \n    \n    \n    \n    \n\n\nYou can make columns filterable by setting filterable=True:\n\nReactable(\n    cars,\n    filterable=True,\n    min_rows=10,\n)\n\n\n\n\nTo make specific columns filterable (or not), set filterable in Column():\n\nReactable(\n    cars,\n    filterable=True,\n    columns=[Column(id=\"price\", filterable=False)],\n    default_page_size=5,\n)\n\n\n\n\n\nCustom filtering\nColumn filtering can be customized using the filter_method and filter_input arguments in Column(). See the Custom Filtering guide for more details and examples. (TODO)\nThis example shows basic usage of a custom filter method, changing filtering on the \"manufacturer\" column to be case-sensitive rather than case-insensitive. (Try filtering for “bmw” and then “BMW”).\n\ntitled = pl_penguins.with_columns(pl.col(\"species\").str.to_titlecase())\n\njs_filter = JS(\n    \"\"\"\nfunction(rows, columnId, filterValue) {\n  return rows.filter(function(row) {\n    return row.values[columnId].indexOf(filterValue) !== -1\n  })\n}\"\"\"\n)\n\nReactable(\n    data=titled.head(2),\n    filterable=True,\n    columns={\n        \"manufacturer\": Column(filter_method=js_filter),\n    },\n    default_page_size=5,\n)",
    "crumbs": [
      "Get Started",
      "Controls",
      "Filtering"
    ]
  },
  {
    "objectID": "get-started/structure-footers.html",
    "href": "get-started/structure-footers.html",
    "title": "Footers",
    "section": "",
    "text": "from reactable import Reactable, Column, JS, embed_css\nfrom reactable.data import cars_93\n\nembed_css()\nYou can add column footers using the footer argument in Column().\nfooter can either be custom content to render (e.g., a character string or HTML tag), or a custom render function. See Custom rendering to learn more about using custom render functions.",
    "crumbs": [
      "Get Started",
      "Structure",
      "Footers"
    ]
  },
  {
    "objectID": "get-started/structure-footers.html#render-function-in-python",
    "href": "get-started/structure-footers.html#render-function-in-python",
    "title": "Footers",
    "section": "Render function in Python",
    "text": "Render function in Python\n\ndata = cars_93[17:47, [\"manufacturer\", \"model\", \"type\", \"price\"]]\n\nReactable(\n    data,\n    default_page_size=5,\n    columns=[\n        Column(id=\"manufacturer\", footer=\"Total\"),\n        Column(id=\"price\", footer=lambda col_info: f\"{sum(col_info.values):.2f}\"),\n    ],\n    default_col_def=Column(footer_style={\"font-weight\": \"bold\"}),\n)",
    "crumbs": [
      "Get Started",
      "Structure",
      "Footers"
    ]
  },
  {
    "objectID": "get-started/structure-footers.html#render-function-in-js",
    "href": "get-started/structure-footers.html#render-function-in-js",
    "title": "Footers",
    "section": "Render function in JS",
    "text": "Render function in JS\n\njs_sum_column = JS(\n    \"\"\"function(column, state) {\n   let total = 0\n   state.sortedData.forEach(function(row) {\n       total += row[column.id]\n   })\n   return total.toLocaleString('en-US', { style: 'currency', currency: 'USD' })\n} \"\"\"\n)\n\nReactable(\n    data,\n    default_page_size=5,\n    columns=[\n        Column(id=\"manufacturer\", footer=\"Total\"),\n        Column(id=\"price\", footer=js_sum_column),\n    ],\n    default_col_def=Column(footer_style={\"font-weight\": \"bold\"}),\n)",
    "crumbs": [
      "Get Started",
      "Structure",
      "Footers"
    ]
  },
  {
    "objectID": "get-started/structure-footers.html#embedding-widgets",
    "href": "get-started/structure-footers.html#embedding-widgets",
    "title": "Footers",
    "section": "Embedding widgets",
    "text": "Embedding widgets\n\nimport polars as pl\nimport plotly.express as px\nimport htmltools as h\n\ncars = cars_93[[\"manufacturer\", \"type\", \"price\"]]\np = px.box(cars.to_pandas(), x=\"price\")\n\nimport plotly.graph_objects as go\n\ndata = pl.DataFrame({\"x\": [1]})\n\nReactable(\n    cars,\n    columns={\"price\": Column(footer=go.FigureWidget(p))},\n    # details=lambda indx: go.FigureWidget(p),\n)",
    "crumbs": [
      "Get Started",
      "Structure",
      "Footers"
    ]
  },
  {
    "objectID": "get-started/structure-rownames.html",
    "href": "get-started/structure-rownames.html",
    "title": "Rownames",
    "section": "",
    "text": "from reactable import Reactable, Column, embed_css\nfrom reactable.data import cars_93\n\nembed_css()\nRow names are shown by default if present. You can customize the row names column by adding a column definition using \".rownames\" as the column name:\nTODO: support pandas index.\nIf row names haven’t been set explicitly, you can force them to show by setting rownames=True:\nReactable(\n    cars_93[:5, :],\n    rownames=True,\n)",
    "crumbs": [
      "Get Started",
      "Structure",
      "Rownames"
    ]
  },
  {
    "objectID": "get-started/structure-rownames.html#row-headers",
    "href": "get-started/structure-rownames.html#row-headers",
    "title": "Rownames",
    "section": "Row headers",
    "text": "Row headers\nRow headers help users navigate the table using assistive techonologies. When cells are marked up as row headers, assistive technologies will read them aloud while navigating through cells in the table.\nYou can mark up cells in a column as row headers by setting row_header to True in Column().\nCells in the row names column are automatically marked up as row headers.\n\ndata = cars_93[:5, [\"manufacturer\", \"model\", \"type\", \"price\", \"mpg_city\", \"air_bags\"]]\n\nReactable(\n        data,\n        columns=[\n            Column(id=\"manufacturer\", row_header=True, style={\"font-weight\": \"600\"}),\n        ],\n        bordered=True,\n    )",
    "crumbs": [
      "Get Started",
      "Structure",
      "Rownames"
    ]
  },
  {
    "objectID": "get-started/format-columns.html",
    "href": "get-started/format-columns.html",
    "title": "Column formatting",
    "section": "",
    "text": "You can format data in a column by providing ColFormat() options to the format argument in Column.\nThe formatters for numbers, dates, times, and currencies are locale-sensitive and automatically adapt to language preferences of the user’s browser. This means, for example, that users will see dates formatted in their own timezone or numbers formatted in their own locale.\nTo use a specific locale for data formatting, provide a vector of BCP 47 language tags in the locales argument. See a list of common BCP 47 language tags for reference.\nimport polars as pl\n\nfrom reactable import Reactable, Column, ColFormat, embed_css\nfrom reactable.data import prices\n\nembed_css()\nReactable(\n    data=prices,\n    columns=[\n        Column(id=\"price_usd\", format=ColFormat(prefix=\"$\", separators=True, digits=2)),\n        Column(id=\"price_inr\", format=ColFormat(currency=\"INR\", separators=True, locales=\"hi-IN\")),\n        Column(id=\"number_fr\", format=ColFormat(locales=\"fr-FR\")),\n        Column(id=\"temp\", format=ColFormat(suffix=\"°C\")),\n        Column(id=\"percent\", format=ColFormat(percent=True, digits=1)),\n        Column(id=\"date\", format=ColFormat(date=True, locales=\"en-GB\")),\n    ],\n)",
    "crumbs": [
      "Get Started",
      "Format",
      "Column formatting"
    ]
  },
  {
    "objectID": "get-started/format-columns.html#date-formatting",
    "href": "get-started/format-columns.html#date-formatting",
    "title": "Column formatting",
    "section": "Date formatting",
    "text": "Date formatting\n\nts = [\"2019-01-02 03:22:15\", \"2019-03-15 09:15:55\", \"2019-09-22 14:20:00\"]\nser = pl.Series(ts, dtype=pl.Date).str.to_datetime().dt.replace_time_zone(\"America/New_York\")\n\ndata = pl.DataFrame(\n    {\n        \"datetime\": ser,\n        \"date\": ser,\n        \"time\": ser,\n        \"time_24h\": ser,\n        \"datetime_pt_BR\": ser,\n    }\n)\n\nReactable(\n    data,\n    columns=[\n        Column(id=\"datetime\", format=ColFormat(datetime=True)),\n        Column(id=\"date\", format=ColFormat(date=True)),\n        Column(id=\"time\", format=ColFormat(time=True)),\n        Column(id=\"time_24h\", format=ColFormat(time=True, hour12=False)),\n        Column(id=\"datetime_pt_BR\", format=ColFormat(datetime=True, locales=\"pt-BR\")),\n    ],\n)",
    "crumbs": [
      "Get Started",
      "Format",
      "Column formatting"
    ]
  },
  {
    "objectID": "get-started/format-columns.html#currency-formatting",
    "href": "get-started/format-columns.html#currency-formatting",
    "title": "Column formatting",
    "section": "Currency formatting",
    "text": "Currency formatting\n\ndata = pl.DataFrame(\n    {\n        \"USD\": [12.12, 2141.213, 0.42, 1.55, 34414],\n        \"EUR\": [10.68, 1884.27, 0.37, 1.36, 30284.32],\n        \"INR\": [861.07, 152122.48, 29.84, 110, 2444942.63],\n        \"JPY\": [1280.0, 226144, 44.36, 164.0, 3634634.61],\n        \"MAD\": [115.78, 20453.94, 4.01, 15.0, 328739.73],\n    }\n)\n\nReactable(\n    data,\n    columns=[\n        Column(id=\"USD\", format=ColFormat(currency=\"USD\", separators=True, locales=\"en-US\")),\n        Column(id=\"EUR\", format=ColFormat(currency=\"EUR\", separators=True, locales=\"de-DE\")),\n        Column(id=\"INR\", format=ColFormat(currency=\"INR\", separators=True, locales=\"hi-IN\")),\n        Column(id=\"JPY\", format=ColFormat(currency=\"JPY\", separators=True, locales=\"ja-JP\")),\n        Column(id=\"MAD\", format=ColFormat(currency=\"MAD\", separators=True, locales=\"ar-MA\")),\n    ],\n)",
    "crumbs": [
      "Get Started",
      "Format",
      "Column formatting"
    ]
  },
  {
    "objectID": "get-started/format-columns.html#displaying-missing-values",
    "href": "get-started/format-columns.html#displaying-missing-values",
    "title": "Column formatting",
    "section": "Displaying missing values",
    "text": "Displaying missing values\n\ndata = pl.DataFrame(\n    {\n        \"n\": [1, 2, None, 4, 5],\n        \"x\": [55, 27, None, float(\"nan\"), 19],\n        \"y\": [1, None, 0.25, 0.55, None],\n    },\n    strict=False,\n)\n\nReactable(\n    data,\n    columns=[\n        Column(id=\"x\", na=\"-\"),\n        Column(id=\"y\", na=\"NA\", format=ColFormat(percent=True)),\n    ],\n)\n\n/opt/hostedtoolcache/Python/3.10.15/x64/lib/python3.10/site-packages/jupyter_client/session.py:721: UserWarning:\n\nMessage serialization failed with:\nOut of range float values are not JSON compliant\nSupporting this message is deprecated in jupyter-client 7, please make sure your message is JSON-compliant",
    "crumbs": [
      "Get Started",
      "Format",
      "Column formatting"
    ]
  },
  {
    "objectID": "get-started/controls-resizing.html",
    "href": "get-started/controls-resizing.html",
    "title": "Column resizing",
    "section": "",
    "text": "from reactable import Reactable, Column, ColGroup, embed_css\nfrom reactable.data import cars_93\n\nembed_css()\nYou can make columns resizable by setting resizable=True:\nReactable(\n    cars_93[:5, :],\n    resizable=True,\n    wrap=False,\n    bordered=True,\n)",
    "crumbs": [
      "Get Started",
      "Controls",
      "Column resizing"
    ]
  },
  {
    "objectID": "get-started/controls-resizing.html#sticky-columns",
    "href": "get-started/controls-resizing.html#sticky-columns",
    "title": "Column resizing",
    "section": "Sticky columns",
    "text": "Sticky columns\nYou can make columns sticky when scrolling horizontally using the sticky= argument in Column or ColGroup. Set sticky to either \"left\" or \"right\" to make the column stick to the left or right side.\n\nReactable(\n    cars_93[:5, :],\n    columns=[\n        Column(\n            id=\"manufacturer\",\n            sticky=\"left\",\n            style={\"border-right\": \"1px solid #eee\"},\n            header_style={\"border-right\": \"1px solid #eee\"},\n        ),\n        Column(\n            id=\"make\",\n            sticky=\"right\",\n            style={\"border-left\": \"1px solid #eee\"},\n            header_style={\"border-left\": \"1px solid #eee\"},\n        ),\n    ],\n    default_col_def=Column(min_width=150),\n)\n\n\n\n\nNote that the border between two column headers can now be clicked and dragged to change the size of a column.\n\nMultiple sticky columns\n\nstick_style = {\"background-color\": \"#f7f7f7\"}\n\nReactable(\n    cars_93[:5, :],\n    columns=[\n        Column(id=\"manufacturer\", sticky=\"left\", style=stick_style, header_style=stick_style),\n        Column(id=\"make\", sticky=\"left\", style=stick_style, header_style=stick_style),\n        Column(id=\"type\", sticky=\"left\", style=stick_style, header_style=stick_style),\n    ],\n)\n\n\n\n\n\n\nSticky column groups\nIf a column group is sticky, all columns in the group will automatically be made sticky.\n\nReactable(\n    cars_93[:5, :],\n    column_groups=[\n        ColGroup(name=\"Make\", columns=[\"manufacturer\", \"model\"], sticky=\"left\"),\n        ColGroup(name=\"Price\", columns=[\"min_price\", \"price\", \"max_price\"], sticky=\"left\"),\n    ],\n    default_col_def=Column(footer=\"Footer\"),\n    resizable=True,\n    wrap=False,\n    bordered=True,\n)",
    "crumbs": [
      "Get Started",
      "Controls",
      "Column resizing"
    ]
  },
  {
    "objectID": "get-started/format-cell.html",
    "href": "get-started/format-cell.html",
    "title": "Rendering cells",
    "section": "",
    "text": "import htmltools as html\nfrom reactable import Reactable, Column, embed_css\nfrom reactable.data import cars_93\n\nembed_css()\n\ndata = cars_93[20:25, [\"manufacturer\", \"model\", \"type\", \"price\"]]",
    "crumbs": [
      "Get Started",
      "Format",
      "Rendering cells"
    ]
  },
  {
    "objectID": "get-started/format-cell.html#using-custom-html-to-color-text",
    "href": "get-started/format-cell.html#using-custom-html-to-color-text",
    "title": "Rendering cells",
    "section": "Using custom HTML to color text",
    "text": "Using custom HTML to color text\n\nfrom reactable.models import CellInfo\n\n\ndef fmt_cell_red(ci: CellInfo):\n    return html.div(ci.value.upper(), style=\"color: red\")\n\n\nReactable(\n    data,\n    columns={\"manufacturer\": Column(cell=fmt_cell_red)},\n)",
    "crumbs": [
      "Get Started",
      "Format",
      "Rendering cells"
    ]
  },
  {
    "objectID": "get-started/format-cell.html#inserting-links-and-emoji",
    "href": "get-started/format-cell.html#inserting-links-and-emoji",
    "title": "Rendering cells",
    "section": "Inserting links and emoji",
    "text": "Inserting links and emoji\n\nfrom reactable.models import CellInfo\nimport htmltools\n\ndata = cars_93[:5, [\"manufacturer\", \"model\", \"type\", \"air_bags\", \"price\"]]\n\n\ndef render_link(ci: CellInfo) -&gt; htmltools.Tag:\n    manufacturer = data[ci.row_index, \"manufacturer\"]\n    url = htmltools.a(\n        ci.value,\n        href=f\"https://wikipedia.org/wiki/{manufacturer}_{ci.value}\",\n        target=\"blank_\",\n    )\n\n    return url\n\n\nReactable(\n    data=data,\n    columns=[\n        Column(id=\"model\", cell=render_link),\n        Column(id=\"air_bags\", cell=lambda ci: \"❌ No\" if ci.value == \"None\" else f\"✅ Yes\"),\n        Column(id=\"price\", cell=lambda ci: f\"${int(ci.value*1000):,}\"),\n    ],\n)",
    "crumbs": [
      "Get Started",
      "Format",
      "Rendering cells"
    ]
  },
  {
    "objectID": "get-started/style-conditional.html",
    "href": "get-started/style-conditional.html",
    "title": "Conditional styling (python)",
    "section": "",
    "text": "You can conditionally style a table using functions that return inline styles or CSS classes. Just like with custom rendering, style functions can either be in Python or JavaScript.\nfrom reactable import Reactable, Column, embed_css\nfrom reactable.data import sleep\n\nembed_css()",
    "crumbs": [
      "Get Started",
      "Style",
      "Conditional styling (python)"
    ]
  },
  {
    "objectID": "get-started/style-conditional.html#cell-styles",
    "href": "get-started/style-conditional.html#cell-styles",
    "title": "Conditional styling (python)",
    "section": "Cell styles",
    "text": "Cell styles\nPass a function to the Column() parameter style= to set conditional CSS styles. The function should take a single CellInfo argument.\nBelow is an example function, which sets the color and font-weight styles.\n\nfrom reactable.models import CellInfo\n\n\ndef cond_style(ci: CellInfo):\n    return {\n        \"color\": \"#008800\" if ci.value &gt; 0 else \"#e00000\",\n        \"font-weight\": \"bold\",\n    }\n\nNotice these 3 pieces:\n\ncond_style will be applied to every cell in a column.\nThe value of the CSS color depends on ci.value, which is the value of the current cell.\nCSS rules are returned as a dictionary.\n\nHere’s the function above used to conditionarlly style the \"extra\" column:\n\nReactable(\n    sleep[:6, :],\n    columns=[\n        Column(\n            id=\"extra\",\n            style=cond_style,\n        )\n    ],\n)",
    "crumbs": [
      "Get Started",
      "Style",
      "Conditional styling (python)"
    ]
  },
  {
    "objectID": "get-started/style-conditional.html#cell-class",
    "href": "get-started/style-conditional.html#cell-class",
    "title": "Conditional styling (python)",
    "section": "Cell class",
    "text": "Cell class\nPass a function to the Column() parameter class_= to set a class attribute on each cell in a column. Similar to style=, the function should take a CellInfo object.\nHere’s an example, which sets some CSS, and then renders a table with class set to \"big\" when the extra column is 3.4.\n\n\n\n\n\n\n.big {\n  font-weight: bold;\n  color: red;\n}\n\ndef big_class(ci: CellInfo):\n    return \"big\" if ci.value == 3.4 else None\n\n\nReactable(\n    sleep[:6, :],\n    columns={\n        \"extra\": Column(class_=big_class),\n    },\n)",
    "crumbs": [
      "Get Started",
      "Style",
      "Conditional styling (python)"
    ]
  },
  {
    "objectID": "get-started/style-conditional.html#row-styles-and-class",
    "href": "get-started/style-conditional.html#row-styles-and-class",
    "title": "Conditional styling (python)",
    "section": "Row styles and class",
    "text": "Row styles and class\nPass a function to row_style= or row_class= to set row-based styles or class names, respectively. The function should take row number as its only argument.\n\n.bold {\n  font-weight: bold;\n}\n\n# define conditional row style and row class functions ----\ndef f_row_style(indx: int):\n    if sleep[indx, \"extra\"] &gt; 0:\n        return {\"background\": \"rgba(0, 0, 0, 0.05)\"}\n\n\ndef f_row_class(indx: int):\n    if sleep[indx, \"extra\"] &gt; 0:\n        return \"bold\"\n\n\n# generate table ----\nReactable(\n    sleep[:6, :],\n    row_style=f_row_style,\n    row_class=f_row_class,\n)",
    "crumbs": [
      "Get Started",
      "Style",
      "Conditional styling (python)"
    ]
  },
  {
    "objectID": "get-started/overview.html",
    "href": "get-started/overview.html",
    "title": "Overview",
    "section": "",
    "text": "import htmltools\nfrom reactable import options, Reactable, Column, embed_css\nfrom reactable.data import cars_93\n\nembed_css()\nreactable handles the process of visualizing tabular data from preview, to polish, to final display."
  },
  {
    "objectID": "get-started/overview.html#preview-quickly-explore-data",
    "href": "get-started/overview.html#preview-quickly-explore-data",
    "title": "Overview",
    "section": "Preview: quickly explore data",
    "text": "Preview: quickly explore data\nAt its simplest, reactable enables you to quickly preview a DataFrame:\n\nlil_cars = cars_93[[\"manufacturer\", \"model\", \"type\", \"price\"]]\nReactable(lil_cars, default_page_size=5, filterable=True)\n\n\n\n\nNote the table above supports these actions:\n\nFiltering rows using the input boxes below the column names.\nPaging through data using controls on the bottom right.\n\nThe Reactable class provides many options for interactive controls like search, sorting, and pagination:\n\nReactable(\n    lil_cars,\n    default_page_size=5,\n\n    # add search bar ----\n    searchable=True,\n\n    # show sort icon, sort desc when icon clicked ----\n    show_sortable=True,\n    default_sort_order=\"desc\",\n\n    # allow typing in page number ----\n    pagination_type=\"jump\",\n\n    # mouse over row to highlight ----\n    highlight=True,\n)\n\n\n\n\n\n\n\n\n\n\nDispelling the curse of the three dots\n\n\n\nThe default DataFrame output in tools like pandas and polars often hides rows and columns with an ellipsis (...). reactable is handy for getting around this.\nFor example, here is what the data looks like in pandas:\n\nlil_cars.to_pandas()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ntype\nprice\n\n\n\n\n0\nAcura\nIntegra\nSmall\n15.9\n\n\n1\nAcura\nLegend\nMidsize\n33.9\n\n\n2\nAudi\n90\nCompact\n29.1\n\n\n3\nAudi\n100\nMidsize\n37.7\n\n\n4\nBMW\n535i\nMidsize\n30.0\n\n\n...\n...\n...\n...\n...\n\n\n88\nVolkswagen\nEurovan\nVan\n19.7\n\n\n89\nVolkswagen\nPassat\nCompact\n20.0\n\n\n90\nVolkswagen\nCorrado\nSporty\n23.3\n\n\n91\nVolvo\n240\nCompact\n22.7\n\n\n92\nVolvo\n850\nMidsize\n26.7\n\n\n\n\n93 rows × 4 columns\n\n\n\nNotice that the middle rows are hidden with ...."
  },
  {
    "objectID": "get-started/overview.html#polish-structure-format-style",
    "href": "get-started/overview.html#polish-structure-format-style",
    "title": "Overview",
    "section": "Polish: structure, format, style",
    "text": "Polish: structure, format, style\n\nStructure table\n\n\nCode\nfrom reactable.models import Reactable, ColGroup, Column, ColFormat, Theme, Language\n\ncars = cars_93[:3, [\"manufacturer\", \"model\", \"type\", \"price\", \"min_price\", \"max_price\"]]\n\nReactable(\n    cars,\n    group_by=\"manufacturer\",\n    column_groups=[\n        ColGroup(\"Info\", [\"manufacturer\", \"model\", \"type\"]),\n        ColGroup(\"Price\", [\"min_price\", \"price\", \"max_price\"]),\n    ],\n    columns={\n        \"manufacturer\": Column(name=\"Manufacturer\"),\n        \"model\": Column(name=\"Model\"),\n        \"type\": Column(name=\"Type\"),\n        \"min_price\": Column(name=\"Min\"),\n        \"max_price\": Column(name=\"Max\"),\n        \"price\": Column(name=\"Amount\"),\n    },\n    default_page_size=3,\n    default_expanded=True,\n)\n\n\n\n\n\n\nColumn groups: higher-level grouping of columns (e.g. “Info” label).\nColumn labels: human-friendly names for columns (e.g. “Manufacturer” vs “manufacturer”).\nRow groupings: expandable grouping of rows. Since the data here is grouped on “manufacturer”, clicking \"Acura (2)\" will collapse the rows beneath it.\n\n\n\nFormat data\nFormatting means changing the display of information, like a date, number with decimals, or currency. There are two important places formatting occurs:\n\nThe body of the table.\nOther parts of the table, like column headers or footers.\n\n\nFormatting body\nHere’s what the data looks like before:\n\nfrom reactable.data import prices\n\nprices.to_pandas()\n\n\n\n\n\n\n\n\nprice_usd\nprice_inr\nnumber_fr\ntemp\npercent\ndate\n\n\n\n\n0\n123456.56\n350.000\n123456.56\n22.0\n0.952556\n2019-01-02\n\n\n1\n132.00\n23208.552\n132.00\nNaN\n0.500000\n2019-03-15\n\n\n2\n5650.12\n1773156.400\n5650.12\n31.0\n0.112000\n2019-09-22\n\n\n\n\n\n\n\nAnd here is the data with column formatting applied.\n\n\nCode\nfrom reactable.data import prices\nfrom reactable import Reactable, Column, ColFormat\n\nReactable(\n    data=prices,\n    columns=[\n        Column(id=\"price_usd\", format=ColFormat(prefix=\"$\", separators=True, digits=2)),\n        Column(id=\"price_inr\", format=ColFormat(currency=\"INR\", separators=True, locales=\"hi-IN\")),\n        Column(id=\"number_fr\", format=ColFormat(locales=\"fr-FR\")),\n        Column(id=\"temp\", format=ColFormat(suffix=\"°C\")),\n        Column(id=\"percent\", format=ColFormat(percent=True, digits=1)),\n        Column(id=\"date\", format=ColFormat(date=True, locales=\"en-GB\")),\n    ],\n)\n\n\n\n\n\n\nprice_usd and price_inr formatted as currencies. numbers_fr uses \",\" decimal marker.\ntemp and percent followed by \"°C\" and \"%\", respectively. Fewer decimals shown.\ndate formatted as day/month/year.\n\n\n\nFormatting other parts\n\n\nCode\nfrom reactable.models import ColInfo\n\n\ndef fmt_footer(ci: ColInfo):\n    ttl = sum(ci.values)\n    return f\"${ttl:.2f}\"\n\n\nReactable(\n    cars,\n    searchable=True,\n    columns={\"price\": Column(footer=fmt_footer)},\n)\n\n\n\n\n\n\n\n\nStyle everything\n\n\nCode\nfrom reactable.data import sleep\n\n\nReactable(\n    sleep[:6, :],\n    columns=[\n        Column(\n            id=\"extra\",\n            style=lambda ci: {\n                \"color\": \"#008800\" if ci.value &gt; 0 else \"#e00000\",\n                \"font-weight\": \"bold\",\n            },\n        )\n    ],\n)\n\n\n\n\n\n\n\nCode\nfrom reactable.data import cars_93\nfrom reactable.models import Theme\n\nReactable(\n    cars_93,\n    searchable=True,\n    striped=True,\n    highlight=True,\n    bordered=True,\n    theme=Theme(\n        border_color=\"#dfe2e5\",\n        striped_color=\"#f6f8fa\",\n        highlight_color=\"#f0f5f9\",\n        cell_padding=\"8px 12px\",\n        style={\n            \"font-family\": \"-apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif\"\n        },\n        search_input_style={\"width\": \"100%\"},\n    ),\n    default_page_size=5,\n)"
  },
  {
    "objectID": "get-started/overview.html#display-exporting-results",
    "href": "get-started/overview.html#display-exporting-results",
    "title": "Overview",
    "section": "Display: exporting results",
    "text": "Display: exporting results\nreactable currently work in wide range of environments:\n\nJupyter Lab\nVS Code\nPositron\nColab\nAnywhere AnyWidgets work"
  },
  {
    "objectID": "get-started/overview.html#next-steps",
    "href": "get-started/overview.html#next-steps",
    "title": "Overview",
    "section": "Next steps",
    "text": "Next steps"
  }
]